Project Structure:

.editorconfig
.gitignore
angular.json
package-lock.json
package.json
project_summary_20241011-090505.txt
project_summary_20241019-071614.txt
README.md
summary.bat
tsconfig.app.json
tsconfig.json
tsconfig.spec.json
.idea\GeoView.iml
.idea\modules.xml
.idea\vcs.xml
.idea\workspace.xml
.vscode\extensions.json
.vscode\launch.json
.vscode\tasks.json
src\favicon.ico
src\index.html
src\main.ts
src\styles.scss
src\app\app-routing.module.ts
src\app\app.component.html
src\app\app.component.scss
src\app\app.component.spec.ts
src\app\app.component.ts
src\app\app.module.ts
src\app\components\map\map.component.html
src\app\components\map\map.component.scss
src\app\components\map\map.component.spec.ts
src\app\components\map\map.component.ts
src\app\components\pane\pane.module.ts
src\app\components\pane\double-pane\double-pane.component.html
src\app\components\pane\double-pane\double-pane.component.scss
src\app\components\pane\double-pane\double-pane.component.spec.ts
src\app\components\pane\double-pane\double-pane.component.ts
src\app\components\pane\pane\pane.component.html
src\app\components\pane\pane\pane.component.scss
src\app\components\pane\pane\pane.component.spec.ts
src\app\components\pane\pane\pane.component.ts
src\app\components\table\table.component.html
src\app\components\table\table.component.scss
src\app\components\table\table.component.spec.ts
src\app\components\table\table.component.ts
src\app\interfaces\filter-listener.ts
src\app\interfaces\model-listener.ts
src\app\interfaces\selection-listener.ts
src\app\models\criteria.model.spec.ts
src\app\models\criteria.model.ts
src\app\models\data-model.ts
src\app\models\geo-model.spec.ts
src\app\models\geo-model.ts
src\app\models\json.model.spec.ts
src\app\models\json.model.ts
src\app\services\airline.service.ts
src\app\services\airport.service.ts
src\app\services\data-facade.service.ts
src\app\services\data.service.spec.ts
src\app\services\data.service.ts
src\app\services\file.service.ts
src\app\services\geo-model.service.spec.ts
src\app\services\geo-model.service.ts
src\app\utils\geo-feature.util.ts
src\assets\.gitkeep
src\assets\Airline.json
src\assets\Airport.json
src\assets\citypair.20240823.json
src\assets\citypair.20240823.min.json
src\assets\flights.json
src\assets\flights.minified.geojson
src\assets\moscow.geojson
src\assets\spinner.gif
src\assets\10m\ne_10m_admin_0_boundary_lines_land.geojson
src\assets\10m\ne_10m_airports.geojson
src\assets\10m\ne_10m_graticules_30.geojson
src\assets\10m\ne_10m_populated_places_simple.geojson
src\assets\10m\ne_10m_railroads_north_america.geojson
src\assets\10m\ne_10m_time_zones.geojson
src\assets\110m\countries.geojson
src\assets\110m\ne_110m_admin_0_countries_lakes.geojson
src\assets\110m\ne_110m_admin_1_states_provinces.geojson
src\assets\110m\ne_110m_coastline.geojson
src\assets\110m\ne_110m_lakes.geojson
src\assets\110m\ne_110m_land.geojson
src\assets\110m\ne_110m_ocean.geojson
src\assets\110m\ne_110m_populated_places.geojson
src\assets\110m\ne_110m_populated_places_simple.geojson
src\assets\110m\ne_110m_rivers_lake_centerlines.geojson
src\assets\110m\world-110m.v1.json
src\assets\50m\ne_50m_land.geojson
src\assets\50m\ne_50m_ocean.geojson
src\assets\50m\ne_50m_populated_places_simple.geojson
src\assets\50m\ne_50m_urban_areas.geojson

File Contents:

\src\main.ts

import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';   :: Write each line without line breaksimport { AppModule } from './app/app.module';   :: Write each line without line breaksplatformBrowserDynamic()   :: Write each line without line breaks.bootstrapModule(AppModule)   :: Write each line without line breaks.catch((err) => console.error(err));   :: Write each line without line breaks
----------------------------------------

\src\index.html

<: Write each line without line breaks<html lang="en">   :: Write each line without line breaks<head>   :: Write each line without line breaks<meta charset="utf-8" />   :: Write each line without line breaks<title>GeoView</title>   :: Write each line without line breaks<base href="/" />   :: Write each line without line breaks<meta name="viewport" content="width=device-width, initial-scale=1" />   :: Write each line without line breaks<link rel="icon" type="image/x-icon" href="favicon.ico" />   :: Write each line without line breaks</head>   :: Write each line without line breaks<body>   :: Write each line without line breaks<app-root></app-root>   :: Write each line without line breaks</body>   :: Write each line without line breaks</html>   :: Write each line without line breaks
----------------------------------------

\src\app\app-routing.module.ts
.
import { NgModule } from '@angular/core';   :: Write each line without line breaksimport { RouterModule, Routes } from '@angular/router';   :: Write each line without line breaksconst routes: Routes = [   :: Write each line without line breaks{ path: '', redirectTo: '/', pathMatch: 'full' },   :: Write each line without line breaks{ path: '**', redirectTo: '/' },  // Redirect all unknown routes to the root   :: Write each line without line breaks];   :: Write each line without line breaks@NgModule({   :: Write each line without line breaksimports: [RouterModule.forRoot(routes)],   :: Write each line without line breaksexports: [RouterModule],   :: Write each line without line breaks})   :: Write each line without line breaksexport class AppRoutingModule {}   :: Write each line without line breaks.
----------------------------------------
.
\src\app\app.component.spec.ts

import { TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { RouterTestingModule } from '@angular/router/testing';   :: Write each line without line breaksimport { AppComponent } from './app.component';   :: Write each line without line breaksdescribe('AppComponent', () => {   :: Write each line without line breaksbeforeEach(() =>   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksimports: [RouterTestingModule],   :: Write each line without line breaksdeclarations: [AppComponent],   :: Write each line without line breaks}),   :: Write each line without line breaks);   :: Write each line without line breaksit('should create the app', () => {   :: Write each line without line breaksconst fixture = TestBed.createComponent(AppComponent);   :: Write each line without line breaksconst app = fixture.componentInstance;   :: Write each line without line breaksexpect(app).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaksit(`should have as title 'GeoView'`, () => {   :: Write each line without line breaksconst fixture = TestBed.createComponent(AppComponent);   :: Write each line without line breaksconst app = fixture.componentInstance;   :: Write each line without line breaksexpect(app.title).toEqual('GeoView');   :: Write each line without line breaks});   :: Write each line without line breaksit('should render title', () => {   :: Write each line without line breaksconst fixture = TestBed.createComponent(AppComponent);   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaksconst compiled = fixture.nativeElement as HTMLElement;   :: Write each line without line breaksexpect(compiled.querySelector('.content span')?.textContent).toContain(   :: Write each line without line breaks'GeoView app is running: Write each line without line breaks);   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks..
----------------------------------------
.
\src\app\app.component.ts

import { Component, OnInit } from '@angular/core';   :: Write each line without line breaksimport { FileService } from './services/file.service';   :: Write each line without line breaksimport { DataModel } from './models/data-model';   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-root',   :: Write each line without line breakstemplateUrl: './app.component.html',   :: Write each line without line breaksstyleUrls: ['./app.component.scss']   :: Write each line without line breaks})   :: Write each line without line breaksexport class AppComponent implements OnInit {   :: Write each line without line breaksisLoading = true;  // Show the spinner initially   :: Write each line without line breaksconstructor(private fileService: FileService) {}   :: Write each line without line breaksngOnInit(): void {   :: Write each line without line breaks// Use D3 to load the GeoJSON data   :: Write each line without line breaksthis.fileService.loadGeoJSON('assets/110m/countries.geojson').then(   :: Write each line without line breaks(geoData) => {   :: Write each line without line breaks// Assuming geoData is a GeoJSON FeatureCollection   :: Write each line without line breaksDataModel.getInstance().addFeatures(geoData.features);   :: Write each line without line breaks// Data loading is done, hide the spinner   :: Write each line without line breaksthis.isLoading = false;   :: Write each line without line breaks},   :: Write each line without line breaks(error) => {   :: Write each line without line breaksconsole.error('Failed to load data', error);   :: Write each line without line breaks// Handle error, maybe show an error message   :: Write each line without line breaks}   :: Write each line without line breaks);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\app.module.ts

import { NgModule, APP_INITIALIZER } from '@angular/core';   :: Write each line without line breaksimport { BrowserModule } from '@angular/platform-browser';   :: Write each line without line breaksimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';   :: Write each line without line breaksimport { HttpClientModule } from '@angular/common/http';   :: Write each line without line breaksimport { FormsModule, ReactiveFormsModule } from '@angular/forms';   :: Write each line without line breaksimport { AppRoutingModule } from './app-routing.module';   :: Write each line without line breaksimport { AppComponent } from './app.component';   :: Write each line without line breaks// GeoView Components   :: Write each line without line breaksimport { MapComponent } from './components/map/map.component';   :: Write each line without line breaksimport { TableComponent } from './components/table/table.component';   :: Write each line without line breaksimport { AirportService } from './services/airport.service';   :: Write each line without line breaksimport { AirlineService } from './services/airline.service';   :: Write each line without line breaksimport { PaneModule } from './components/pane/pane.module';   :: Write each line without line breaks// export function preloadData(   :: Write each line without line breaks//   airportService: AirportService,   :: Write each line without line breaks//   airlineService: AirlineService   :: Write each line without line breaks// ) {   :: Write each line without line breaks//   return () =>   :: Write each line without line breaks//     Promise.all([   :: Write each line without line breaks//       airportService.loadAirports().toPromise().then(() => {   :: Write each line without line breaks//         console.log('Airports preloaded successfully');   :: Write each line without line breaks//       }),   :: Write each line without line breaks//       airlineService.loadAirlines().toPromise().then(() => {   :: Write each line without line breaks//         console.log('Airlines preloaded successfully');   :: Write each line without line breaks//       })   :: Write each line without line breaks//     ]);   :: Write each line without line breaks// }   :: Write each line without line breaks// Function to preload data   :: Write each line without line breaks//export function preloadData(geoModelService: GeoModelService) {   :: Write each line without line breaks//  return () => geoModelService.loadData().toPromise();   :: Write each line without line breaks//}   :: Write each line without line breaks@NgModule({   :: Write each line without line breaksdeclarations: [   :: Write each line without line breaksAppComponent,   :: Write each line without line breaksMapComponent,   :: Write each line without line breaksTableComponent   :: Write each line without line breaks],   :: Write each line without line breaksimports: [   :: Write each line without line breaksBrowserModule,   :: Write each line without line breaksBrowserAnimationsModule,   :: Write each line without line breaksHttpClientModule,   :: Write each line without line breaksFormsModule,   :: Write each line without line breaksReactiveFormsModule,   :: Write each line without line breaksAppRoutingModule,   :: Write each line without line breaksPaneModule   :: Write each line without line breaks],   :: Write each line without line breaksproviders: [   :: Write each line without line breaks// AirportService,   :: Write each line without line breaks// AirlineService,   :: Write each line without line breaks// {   :: Write each line without line breaks//   provide: APP_INITIALIZER,   :: Write each line without line breaks//   useFactory: preloadData,   :: Write each line without line breaks//   deps: [AirportService, AirlineService],   :: Write each line without line breaks//   multi: true,   :: Write each line without line breaks// },   :: Write each line without line breaks],   :: Write each line without line breaksbootstrap: [AppComponent],   :: Write each line without line breaks})   :: Write each line without line breaksexport class AppModule {}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\app.component.html

<div *ngIf="isLoading" class="loading-container">   :: Write each line without line breaks<img src="assets/spinner.gif" alt="Loading..." />   :: Write each line without line breaks</div>   :: Write each line without line breaks<div *ngIf=": Write each line without line breaks<app-double-pane>   :: Write each line without line breaks<app-pane class="left-panel">   :: Write each line without line breaks<app-map #map></app-map>   :: Write each line without line breaks</app-pane>   :: Write each line without line breaks<app-pane class="right-panel">   :: Write each line without line breaks<app-table></app-table>   :: Write each line without line breaks</app-pane>   :: Write each line without line breaks</app-double-pane>   :: Write each line without line breaks</div>   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\map\map.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { MapComponent } from './map.component';   :: Write each line without line breaksdescribe('MapComponent', () => {   :: Write each line without line breakslet component: MapComponent;   :: Write each line without line breakslet fixture: ComponentFixture<MapComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [MapComponent],   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(MapComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\map\map.component.ts

import { Component, OnInit, AfterViewInit, OnDestroy, ElementRef, ViewChild } from '@angular/core';   :: Write each line without line breaksimport * as d3 from 'd3';   :: Write each line without line breaksimport * as d3Geo from 'd3-geo';   :: Write each line without line breaksimport { FeatureCollection } from 'geojson';   :: Write each line without line breaksimport { HttpClient } from '@angular/common/http';   :: Write each line without line breaksimport { DataModel } from '../../models/data-model';  // Import DataModel for loading features   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-map',   :: Write each line without line breakstemplateUrl: './map.component.html',   :: Write each line without line breaksstyleUrls: ['./map.component.scss']   :: Write each line without line breaks})   :: Write each line without line breaksexport class MapComponent implements OnInit, AfterViewInit, OnDestroy {   :: Write each line without line breaks@ViewChild('mapContainer', { static: true }) mapContainer: ElementRef;   :: Write each line without line breaksprivate svg: d3.Selection<SVGSVGElement, unknown, null, undefined>;   :: Write each line without line breaksprivate projection: d3.GeoProjection;   :: Write each line without line breaksprivate path: d3.GeoPath;   :: Write each line without line breaksprivate geoData: FeatureCollection | null = null;   :: Write each line without line breaksprivate resizeObserver: ResizeObserver;   :: Write each line without line breaksconstructor(private http: HttpClient) {}   :: Write each line without line breaks// ngOnInit(): void {   :: Write each line without line breaks//   this.http.get<FeatureCollection>('assets/110m/countries.geojson').subscribe(geoJson => {   :: Write each line without line breaks//     this.geoData = geoJson;   :: Write each line without line breaks//     this.initMap();   :: Write each line without line breaks//   });   :: Write each line without line breaks// }   :: Write each line without line breaksngOnInit(): void {   :: Write each line without line breaks// Wrap the features from DataModel in a FeatureCollection   :: Write each line without line breaksthis.geoData = {   :: Write each line without line breakstype: 'FeatureCollection',   :: Write each line without line breaksfeatures: DataModel.getInstance().getFeatures()   :: Write each line without line breaks};   :: Write each line without line breaks// Initialize the map with the loaded data   :: Write each line without line breaksthis.initMap();   :: Write each line without line breaks}   :: Write each line without line breaksngAfterViewInit(): void {   :: Write each line without line breaksthis.resizeObserver = new ResizeObserver(() => {   :: Write each line without line breaksconsole.log('Map container resized.');   :: Write each line without line breaksthis.resizeMap();   :: Write each line without line breaks});   :: Write each line without line breaksthis.resizeObserver.observe(this.mapContainer.nativeElement);   :: Write each line without line breaks}   :: Write each line without line breaksngOnDestroy(): void {   :: Write each line without line breaksif (this.resizeObserver) {   :: Write each line without line breaksthis.resizeObserver.disconnect();   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breakspublic resizeMap(): void {   :: Write each line without line breaksif (this.mapContainer && this.geoData) {   :: Write each line without line breaksconst containerWidth = this.mapContainer.nativeElement.offsetWidth;   :: Write each line without line breaksconst containerHeight = this.mapContainer.nativeElement.offsetHeight;   :: Write each line without line breaksconst width = containerWidth * 0.8;   :: Write each line without line breaksconst height = containerHeight * 0.8;   :: Write each line without line breaksconsole.log(`Resizing map to ${width}x${height}`);   :: Write each line without line breaksthis.svg   :: Write each line without line breaks.attr('width', width)   :: Write each line without line breaks.attr('height', height)   :: Write each line without line breaks.attr('viewBox', `0 0 ${width} ${height}`);   :: Write each line without line breaksthis.projection   :: Write each line without line breaks.fitSize([width, height], this.geoData)   :: Write each line without line breaks.translate([width / 2, height / 2]);   :: Write each line without line breaksthis.svg.selectAll('path')   :: Write each line without line breaks.attr('d', this.path);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksprivate initMap(): void {   :: Write each line without line breaksconst containerWidth = this.mapContainer.nativeElement.offsetWidth;   :: Write each line without line breaksconst containerHeight = this.mapContainer.nativeElement.offsetHeight;   :: Write each line without line breaksconst width = containerWidth * 0.8;   :: Write each line without line breaksconst height = containerHeight * 0.8;   :: Write each line without line breaksthis.svg = d3.select(this.mapContainer.nativeElement).append('svg')   :: Write each line without line breaks.attr('width', width)   :: Write each line without line breaks.attr('height', height)   :: Write each line without line breaks.attr('viewBox', `0 0 ${width} ${height}`)   :: Write each line without line breaks.attr('preserveAspectRatio', 'xMidYMid meet');   :: Write each line without line breaksthis.projection = d3Geo.geoMercator()   :: Write each line without line breaks.fitSize([width, height], this.geoData)   :: Write each line without line breaks.translate([width / 2, height / 2]);   :: Write each line without line breaksthis.path = d3Geo.geoPath().projection(this.projection);   :: Write each line without line breaksthis.svg.append('g').selectAll('path')   :: Write each line without line breaks.data(this.geoData.features)   :: Write each line without line breaks.enter().append('path')   :: Write each line without line breaks.attr('d', this.path)   :: Write each line without line breaks.attr('class', 'country')   :: Write each line without line breaks.style('stroke', '#333')   :: Write each line without line breaks.style('stroke-width', '0.5px')   :: Write each line without line breaks.style('fill', '#d1e7f1');   :: Write each line without line breaksthis.resizeMap(); // Ensure initial sizing is correct   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\map\map.component.html

<: Write each line without line breaks<div #mapContainer class="map-container">   :: Write each line without line breaks<: Write each line without line breaks</div>   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\pane\pane.module.ts

import { NgModule } from '@angular/core';   :: Write each line without line breaksimport { CommonModule } from '@angular/common';   :: Write each line without line breaksimport { PaneComponent } from './pane/pane.component';   :: Write each line without line breaksimport { DoublePaneComponent } from './double-pane/double-pane.component';   :: Write each line without line breaks@NgModule({   :: Write each line without line breaksdeclarations: [PaneComponent, DoublePaneComponent],   :: Write each line without line breaksimports: [CommonModule],   :: Write each line without line breaksexports: [PaneComponent, DoublePaneComponent]   :: Write each line without line breaks})   :: Write each line without line breaksexport class PaneModule { }   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\pane\double-pane\double-pane.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { DoublePaneComponent } from './double-pane.component';   :: Write each line without line breaksdescribe('DoublePaneComponent', () => {   :: Write each line without line breakslet component: DoublePaneComponent;   :: Write each line without line breakslet fixture: ComponentFixture<DoublePaneComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [DoublePaneComponent]   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(DoublePaneComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\pane\double-pane\double-pane.component.ts

import { Component, ElementRef, ViewChild, AfterViewInit, AfterContentInit, ContentChildren, QueryList, OnDestroy, ChangeDetectorRef } from '@angular/core';   :: Write each line without line breaksimport { fromEvent, Subscription } from 'rxjs';   :: Write each line without line breaksimport { throttleTime, takeUntil } from 'rxjs/operators';   :: Write each line without line breaksimport { PaneComponent } from '../pane/pane.component';   :: Write each line without line breaksimport { MapComponent } from '../../map/map.component'; // Correct import   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-double-pane',   :: Write each line without line breakstemplateUrl: './double-pane.component.html',   :: Write each line without line breaksstyleUrls: ['./double-pane.component.scss']   :: Write each line without line breaks})   :: Write each line without line breaksexport class DoublePaneComponent implements AfterViewInit, AfterContentInit, OnDestroy {   :: Write each line without line breaks@ViewChild('map', { static: false }) mapComponent: MapComponent; // Use template reference   :: Write each line without line breaks@ViewChild('divider', { static: true }) divider: ElementRef;   :: Write each line without line breaks@ViewChild('container', { static: true }) container: ElementRef;   :: Write each line without line breaks@ContentChildren(PaneComponent) panes: QueryList<PaneComponent>;   :: Write each line without line breaksisDragging = false;   :: Write each line without line breaksleftPaneWidth = 50;   :: Write each line without line breaksdividerPosition = '50%';   :: Write each line without line breaksprivate subscriptions: Subscription = new Subscription();   :: Write each line without line breaksconstructor(private cdr: ChangeDetectorRef) {}   :: Write each line without line breaksngAfterViewInit(): void {   :: Write each line without line breaksconsole.log('ngAfterViewInit: Checking if MapComponent is detected.');   :: Write each line without line breaksconsole.log('MapComponent:', this.mapComponent);   :: Write each line without line breaksthis.updatePaneWidths();   :: Write each line without line breaks}   :: Write each line without line breaksngAfterContentInit() {   :: Write each line without line breaksconsole.log('DoublePaneComponent - ngAfterContentInit');   :: Write each line without line breaksconsole.log('Number of panes:', this.panes.length);   :: Write each line without line breaks}   :: Write each line without line breaksngOnDestroy(): void {   :: Write each line without line breaksthis.subscriptions.unsubscribe();   :: Write each line without line breaks}   :: Write each line without line breaksonMouseDown(event: MouseEvent): void {   :: Write each line without line breaksevent.preventDefault();   :: Write each line without line breaksthis.isDragging = true;   :: Write each line without line breaksconst moveSubscription = fromEvent<MouseEvent>(document, 'mousemove').pipe(   :: Write each line without line breakstakeUntil(fromEvent(document, 'mouseup')),   :: Write each line without line breaksthrottleTime(16) // Approx. 60fps   :: Write each line without line breaks).subscribe(e => this.resize(e.clientX));   :: Write each line without line breaksconst upSubscription = fromEvent(document, 'mouseup').subscribe(() => {   :: Write each line without line breaksthis.isDragging = false;   :: Write each line without line breaksmoveSubscription.unsubscribe();   :: Write each line without line breaksupSubscription.unsubscribe();   :: Write each line without line breaks});   :: Write each line without line breaksthis.subscriptions.add(moveSubscription);   :: Write each line without line breaksthis.subscriptions.add(upSubscription);   :: Write each line without line breaks}   :: Write each line without line breaksresize(x: number): void {   :: Write each line without line breaksconst containerRect = this.container.nativeElement.getBoundingClientRect();   :: Write each line without line breaksconst containerWidth = containerRect.width;   :: Write each line without line breaksconst newLeftWidth = ((x - containerRect.left) / containerWidth) * 100;   :: Write each line without line breaksthis.leftPaneWidth = Math.max(10, Math.min(90, newLeftWidth));   :: Write each line without line breaksthis.dividerPosition = `${this.leftPaneWidth}%`;   :: Write each line without line breaksthis.updatePaneWidths();   :: Write each line without line breaks}   :: Write each line without line breaksprivate updatePaneWidths(): void {   :: Write each line without line breaksconsole.log('Updating pane widths...');   :: Write each line without line breaksconst paneArray = this.panes.toArray();   :: Write each line without line breaksconsole.log('Pane array:', paneArray);   :: Write each line without line breaksif (paneArray.length === 2) {   :: Write each line without line breaksconsole.log(`Setting left pane width to ${this.leftPaneWidth}%`);   :: Write each line without line breakspaneArray[0].setWidth(`${this.leftPaneWidth}%`);   :: Write each line without line breaksconsole.log(`Setting right pane width to ${100 - this.leftPaneWidth}%`);   :: Write each line without line breakspaneArray[1].setWidth(`${100 - this.leftPaneWidth}%`);   :: Write each line without line breaksthis.cdr.detectChanges();   :: Write each line without line breaksconsole.log('Change detection triggered.');   :: Write each line without line breaks// Ensure the map component exists and trigger its resize logic   :: Write each line without line breaksif (this.mapComponent) {   :: Write each line without line breaksconsole.log('Calling resizeMap on the MapComponent instance.');   :: Write each line without line breaksthis.mapComponent.resizeMap();   :: Write each line without line breaks} else {   :: Write each line without line breaksconsole.warn('MapComponent instance not found.');   :: Write each line without line breaks}   :: Write each line without line breaks} else {   :: Write each line without line breaksconsole.warn('Expected 2 panes, but found:', paneArray.length);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\pane\double-pane\double-pane.component.html

<div #container class="double-pane-container">   :: Write each line without line breaks<ng-content select="app-pane.left-panel"></ng-content>   :: Write each line without line breaks<div #divider class="divider" (mousedown)="onMouseDown($event)" [style.left]="dividerPosition"></div>   :: Write each line without line breaks<ng-content select="app-pane.right-panel"></ng-content>   :: Write each line without line breaks</div>   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\pane\pane\pane.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { PaneComponent } from './pane.component';   :: Write each line without line breaksdescribe('PaneComponent', () => {   :: Write each line without line breakslet component: PaneComponent;   :: Write each line without line breakslet fixture: ComponentFixture<PaneComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [PaneComponent]   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(PaneComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\pane\pane\pane.component.ts

import { Component, ElementRef, Renderer2, ChangeDetectorRef, AfterContentInit } from '@angular/core';   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-pane',   :: Write each line without line breakstemplateUrl: './pane.component.html',   :: Write each line without line breaksstyleUrls: ['./pane.component.scss']   :: Write each line without line breaks})   :: Write each line without line breaksexport class PaneComponent implements AfterContentInit {   :: Write each line without line breaksconstructor(   :: Write each line without line breakspublic elementRef: ElementRef,   :: Write each line without line breaksprivate renderer: Renderer2,   :: Write each line without line breaksprivate cdr: ChangeDetectorRef   :: Write each line without line breaks) {}   :: Write each line without line breaksngAfterContentInit() {   :: Write each line without line breaksconsole.log('PaneComponent - ngAfterContentInit');   :: Write each line without line breaks//console.log('Pane content:', this.el.nativeElement.innerHTML);   :: Write each line without line breaks}   :: Write each line without line breakssetWidth(width: string) {   :: Write each line without line breaksconsole.log('Setting pane width:', width);   :: Write each line without line breaksthis.renderer.setStyle(this.elementRef.nativeElement, 'width', width);   :: Write each line without line breaksthis.cdr.detectChanges(); // Force change detection   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\pane\pane\pane.component.html

<ng-content></ng-content>   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\table\table.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { TableComponent } from './table.component';   :: Write each line without line breaksdescribe('TableComponent', () => {   :: Write each line without line breakslet component: TableComponent;   :: Write each line without line breakslet fixture: ComponentFixture<TableComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [TableComponent],   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(TableComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\table\table.component.ts

import { Component, OnInit, AfterViewInit, OnDestroy, ElementRef, ViewChild } from '@angular/core';   :: Write each line without line breaksimport { HttpClient } from '@angular/common/http';   :: Write each line without line breaksimport { FeatureCollection, Feature } from 'geojson';   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-table',   :: Write each line without line breakstemplateUrl: './table.component.html',   :: Write each line without line breaksstyleUrls: ['./table.component.scss']   :: Write each line without line breaks})   :: Write each line without line breaksexport class TableComponent implements OnInit, AfterViewInit, OnDestroy {   :: Write each line without line breaks@ViewChild('tableContainer', { static: true }) tableContainer: ElementRef;   :: Write each line without line breaksdisplayedColumns: string[] = []; // Define your table columns dynamically based on GeoJSON data   :: Write each line without line breaksdataSource: any[] = []; // Add your data here   :: Write each line without line breaksprivate geoData: FeatureCollection | null = null;   :: Write each line without line breaksprivate resizeObserver: ResizeObserver;   :: Write each line without line breaksconstructor(private http: HttpClient) {}   :: Write each line without line breaksngOnInit(): void {   :: Write each line without line breaks// Fetch GeoJSON data   :: Write each line without line breaksthis.http.get<FeatureCollection>('assets/110m/countries.geojson').subscribe(geoJson => {   :: Write each line without line breaksthis.geoData = geoJson;   :: Write each line without line breaksthis.populateTable();   :: Write each line without line breaks});   :: Write each line without line breaks}   :: Write each line without line breaksngAfterViewInit(): void {   :: Write each line without line breaksthis.resizeTable(); // Initial table size adjustment   :: Write each line without line breaks// Use ResizeObserver to detect size changes in the parent container (pane)   :: Write each line without line breaksthis.resizeObserver = new ResizeObserver(() => {   :: Write each line without line breaksconsole.log('Table container resized.');   :: Write each line without line breaksthis.resizeTable(); // Adjust the table size on container resize   :: Write each line without line breaks});   :: Write each line without line breaks// Observe the parent container element   :: Write each line without line breaksthis.resizeObserver.observe(this.tableContainer.nativeElement);   :: Write each line without line breaks}   :: Write each line without line breaksngOnDestroy(): void {   :: Write each line without line breaksif (this.resizeObserver) {   :: Write each line without line breaksthis.resizeObserver.disconnect(); // Clean up observer on destroy   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksprivate populateTable(): void {   :: Write each line without line breaksif (this.geoData) {   :: Write each line without line breaksconst features = this.geoData.features;   :: Write each line without line breaksif (features.length > 0) {   :: Write each line without line breaks// Dynamically set the table columns based on the first feature's properties   :: Write each line without line breaksthis.displayedColumns = Object.keys(features[0].properties || {});   :: Write each line without line breaks// Populate the data source with feature properties (non-geometry)   :: Write each line without line breaksthis.dataSource = features.map((feature: Feature) => feature.properties);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksresizeTable(): void {   :: Write each line without line breaksif (this.tableContainer) {   :: Write each line without line breaksconst width = this.tableContainer.nativeElement.offsetWidth;   :: Write each line without line breaksconst height = this.tableContainer.nativeElement.offsetHeight;   :: Write each line without line breaksconsole.log(`Resizing table to ${width}x${height}`);   :: Write each line without line breaks// Adjust table layout, such as setting widths or heights based on container size   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksapplyFilter(filterValue: string): void {   :: Write each line without line breaks// Logic to filter table data based on input   :: Write each line without line breaks}   :: Write each line without line breakssortData(column: string): void {   :: Write each line without line breaks// Logic to sort the data when a column header is clicked   :: Write each line without line breaks}   :: Write each line without line breaksonRowClick(row: any): void {   :: Write each line without line breaks// Logic to handle row click events   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\components\table\table.component.html

<div #tableContainer class="table-container">   :: Write each line without line breaks<div class="table-header">   :: Write each line without line breaks<input class="filter-input" (input)="applyFilter($event.target.value)" placeholder="Filter data...">   :: Write each line without line breaks</div>   :: Write each line without line breaks<div class="table-content">   :: Write each line without line breaks<table>   :: Write each line without line breaks<thead>   :: Write each line without line breaks<tr>   :: Write each line without line breaks<th *ngFor="let column of displayedColumns" (click)="sortData(column)">   :: Write each line without line breaks{{ column }}   :: Write each line without line breaks</th>   :: Write each line without line breaks</tr>   :: Write each line without line breaks</thead>   :: Write each line without line breaks<tbody>   :: Write each line without line breaks<tr *ngFor="let row of dataSource" (click)="onRowClick(row)" [class.selected]="row === selectedFeature?.properties">   :: Write each line without line breaks<td *ngFor="let column of displayedColumns">{{ row[column] }}</td>   :: Write each line without line breaks</tr>   :: Write each line without line breaks</tbody>   :: Write each line without line breaks</table>   :: Write each line without line breaks</div>   :: Write each line without line breaks</div>   :: Write each line without line breaks..
----------------------------------------
...
\src\app\interfaces\filter-listener.ts

export interface FilterCriteria {   :: Write each line without line breaks[key: string]: any;   :: Write each line without line breaks}   :: Write each line without line breaksexport interface FilterListener {   :: Write each line without line breaks/**   :: Write each line without line breaks* Called when a filter is applied.   :: Write each line without line breaks* @param criteria The filter criteria   :: Write each line without line breaks*/   :: Write each line without line breaksonFilter(criteria: FilterCriteria): void;   :: Write each line without line breaks/**   :: Write each line without line breaks* Called when the filter is cleared.   :: Write each line without line breaks*/   :: Write each line without line breaksonClearFilter(): void;   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\interfaces\model-listener.ts

import { GeoModel } from '../models/geo-model';   :: Write each line without line breaksexport interface ModelListener {   :: Write each line without line breaks/**   :: Write each line without line breaks* Called when the model data is updated.   :: Write each line without line breaks* @param model The updated GeoJSONModel   :: Write each line without line breaks*/   :: Write each line without line breaksonModelChange(model: GeoModel): void;   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\interfaces\selection-listener.ts

import { Feature } from 'geojson';   :: Write each line without line breaksexport interface SelectionListener {   :: Write each line without line breaks/**   :: Write each line without line breaks* Called when a feature is selected.   :: Write each line without line breaks* @param feature The selected feature   :: Write each line without line breaks*/   :: Write each line without line breaksonSelect(feature: Feature): void;   :: Write each line without line breaks/**   :: Write each line without line breaks* Called when a feature is deselected.   :: Write each line without line breaks* @param feature The deselected feature   :: Write each line without line breaks*/   :: Write each line without line breaksonDeselect(feature: Feature): void;   :: Write each line without line breaks/**   :: Write each line without line breaks* Called when the selection is cleared.   :: Write each line without line breaks*/   :: Write each line without line breaksonClearSelection(): void;   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\models\criteria.model.spec.ts

import { CriteriaModel } from './criteria.model';   :: Write each line without line breaksdescribe('CriteriaModel', () => {   :: Write each line without line breaksit('should create an instance', () => {   :: Write each line without line breaksexpect(new CriteriaModel()).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks..
----------------------------------------
...
\src\app\models\criteria.model.ts

export interface CriteriaModel {   :: Write each line without line breaksfilterString: string;   :: Write each line without line breaks// Add any additional filter criteria properties as needed   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\models\data-model.ts

export class DataModel {   :: Write each line without line breaksprivate static instance: DataModel;   :: Write each line without line breaksprivate features: any[] = [];  // Array to store GeoJSON features   :: Write each line without line breaks// Private constructor to enforce the singleton pattern   :: Write each line without line breaksprivate constructor() {}   :: Write each line without line breaks// Get the singleton instance of the DataModel   :: Write each line without line breakspublic static getInstance(): DataModel {   :: Write each line without line breaksif (: Write each line without line breaksDataModel.instance = new DataModel();   :: Write each line without line breaks}   :: Write each line without line breaksreturn DataModel.instance;   :: Write each line without line breaks}   :: Write each line without line breaks// Add features to the model (usually called after the data is loaded)   :: Write each line without line breakspublic addFeatures(features: any[]): void {   :: Write each line without line breaksthis.features = features;   :: Write each line without line breaks}   :: Write each line without line breaks// Retrieve the stored features   :: Write each line without line breakspublic getFeatures(): any[] {   :: Write each line without line breaksreturn this.features;   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\models\geo-model.spec.ts

import { GeoModel } from './geo-model';   :: Write each line without line breaksdescribe('GeoModel', () => {   :: Write each line without line breaksit('should create an instance', () => {   :: Write each line without line breaksexpect(new GeoModel()).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks..
----------------------------------------
...
\src\app\models\geo-model.ts

import { Feature, FeatureCollection, Geometry } from 'geojson';   :: Write each line without line breaksexport class GeoModel {   :: Write each line without line breaksprivate featureCollection: FeatureCollection;   :: Write each line without line breaksconstructor(data: FeatureCollection) {   :: Write each line without line breaksthis.featureCollection = data;   :: Write each line without line breaks}   :: Write each line without line breaksget data(): FeatureCollection {   :: Write each line without line breaksreturn this.featureCollection;   :: Write each line without line breaks}   :: Write each line without line breaksget features(): Feature[] {   :: Write each line without line breaksreturn this.featureCollection.features;   :: Write each line without line breaks}   :: Write each line without line breaksgetFeatureById(id: string | number): Feature | undefined {   :: Write each line without line breaksreturn this.features.find((feature) => feature.id === id);   :: Write each line without line breaks}   :: Write each line without line breaksgetFeaturesByProperty(key: string, value: any): Feature[] {   :: Write each line without line breaksreturn this.features.filter(   :: Write each line without line breaks(feature) => feature.properties && feature.properties[key] === value,   :: Write each line without line breaks);   :: Write each line without line breaks}   :: Write each line without line breaksaddFeature(feature: Feature): void {   :: Write each line without line breaksthis.featureCollection.features.push(feature);   :: Write each line without line breaks}   :: Write each line without line breaksremoveFeature(id: string | number): void {   :: Write each line without line breaksconst index = this.features.findIndex((feature) => feature.id === id);   :: Write each line without line breaksif (index : Write each line without line breaksthis.featureCollection.features.splice(index, 1);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksupdateFeature(id: string | number, updatedFeature: Partial<Feature>): void {   :: Write each line without line breaksconst feature = this.getFeatureById(id);   :: Write each line without line breaksif (feature) {   :: Write each line without line breaksObject.assign(feature, updatedFeature);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksgetPropertyKeys(): string[] {   :: Write each line without line breaksconst allKeys = this.features.flatMap((feature) =>   :: Write each line without line breaksObject.keys(feature.properties || {}),   :: Write each line without line breaks);   :: Write each line without line breaksreturn [...new Set(allKeys)]; // Remove duplicates   :: Write each line without line breaks}   :: Write each line without line breaksgetBounds(): [number, number, number, number] | null {   :: Write each line without line breaksif (this.features.length === 0) return null;   :: Write each line without line breakslet minX = Infinity,   :: Write each line without line breaksminY = Infinity,   :: Write each line without line breaksmaxX = -Infinity,   :: Write each line without line breaksmaxY = -Infinity;   :: Write each line without line breaksthis.features.forEach((feature) => {   :: Write each line without line breaksconst bounds = this.getGeometryBounds(feature.geometry);   :: Write each line without line breaksif (bounds) {   :: Write each line without line breaksminX = Math.min(minX, bounds[0]);   :: Write each line without line breaksminY = Math.min(minY, bounds[1]);   :: Write each line without line breaksmaxX = Math.max(maxX, bounds[2]);   :: Write each line without line breaksmaxY = Math.max(maxY, bounds[3]);   :: Write each line without line breaks}   :: Write each line without line breaks});   :: Write each line without line breaksreturn [minX, minY, maxX, maxY];   :: Write each line without line breaks}   :: Write each line without line breaksprivate getGeometryBounds(   :: Write each line without line breaksgeometry: Geometry,   :: Write each line without line breaks): [number, number, number, number] | null {   :: Write each line without line breaksswitch (geometry.type) {   :: Write each line without line breakscase 'Point':   :: Write each line without line breaksconst [x, y] = geometry.coordinates;   :: Write each line without line breaksreturn [x, y, x, y];   :: Write each line without line breakscase 'LineString':   :: Write each line without line breakscase 'MultiPoint':   :: Write each line without line breaksreturn this.getCoordinatesBounds(geometry.coordinates);   :: Write each line without line breakscase 'Polygon':   :: Write each line without line breakscase 'MultiLineString':   :: Write each line without line breaksreturn this.getCoordinatesBounds(geometry.coordinates.flat());   :: Write each line without line breakscase 'MultiPolygon':   :: Write each line without line breaksreturn this.getCoordinatesBounds(geometry.coordinates.flat(2));   :: Write each line without line breaksdefault:   :: Write each line without line breaksreturn null;   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksprivate getCoordinatesBounds(   :: Write each line without line breakscoords: number[][],   :: Write each line without line breaks): [number, number, number, number] {   :: Write each line without line breaksconst xs = coords.map((c) => c[0]);   :: Write each line without line breaksconst ys = coords.map((c) => c[1]);   :: Write each line without line breaksreturn [Math.min(...xs), Math.min(...ys), Math.max(...xs), Math.max(...ys)];   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\models\json.model.spec.ts

import { JSONModel } from './json.model';   :: Write each line without line breaksdescribe('JSONModel', () => {   :: Write each line without line breaksit('should create an instance', () => {   :: Write each line without line breaksexpect(new JSONModel()).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks..
----------------------------------------
...
\src\app\models\json.model.ts

export class JSONModel {   :: Write each line without line breaksprivate data: any;   :: Write each line without line breaksconstructor(jsonData: any) {   :: Write each line without line breaksthis.data = jsonData;   :: Write each line without line breaks}   :: Write each line without line breaksget(path: string, defaultValue: any = undefined): any {   :: Write each line without line breaksreturn path.split('.').reduce((acc, part) => {   :: Write each line without line breaksreturn acc && acc[part]  defaultValue;   :: Write each line without line breaks}, this.data);   :: Write each line without line breaks}   :: Write each line without line breaksset(path: string, value: any): void {   :: Write each line without line breaksconst parts = path.split('.');   :: Write each line without line breaksconst last = parts.pop();   :: Write each line without line breaksconst target = parts.reduce((acc, part) => {   :: Write each line without line breaksif (acc[part] === undefined) {   :: Write each line without line breaksacc[part] = {};   :: Write each line without line breaks}   :: Write each line without line breaksreturn acc[part];   :: Write each line without line breaks}, this.data);   :: Write each line without line breaksif (last) {   :: Write each line without line breakstarget[last] = value;   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksdelete(path: string): void {   :: Write each line without line breaksconst parts = path.split('.');   :: Write each line without line breaksconst last = parts.pop();   :: Write each line without line breaksconst target = parts.reduce((acc, part) => {   :: Write each line without line breaksreturn acc && acc[part]  undefined;   :: Write each line without line breaks}, this.data);   :: Write each line without line breaksif (target && last) {   :: Write each line without line breaksdelete target[last];   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breakshas(path: string): boolean {   :: Write each line without line breaksreturn this.get(path) : Write each line without line breaks}   :: Write each line without line breakskeys(): string[] {   :: Write each line without line breaksreturn Object.keys(this.data);   :: Write each line without line breaks}   :: Write each line without line breaksvalues(): any[] {   :: Write each line without line breaksreturn Object.values(this.data);   :: Write each line without line breaks}   :: Write each line without line breaksentries(): [string, any][] {   :: Write each line without line breaksreturn Object.entries(this.data);   :: Write each line without line breaks}   :: Write each line without line breakstoJSON(): any {   :: Write each line without line breaksreturn JSON.parse(JSON.stringify(this.data));   :: Write each line without line breaks}   :: Write each line without line breakstoString(): string {   :: Write each line without line breaksreturn JSON.stringify(this.data);   :: Write each line without line breaks}   :: Write each line without line breaksforEach(callback: (key: string, value: any) => void): void {   :: Write each line without line breaksObject.entries(this.data).forEach(([key, value]) => callback(key, value));   :: Write each line without line breaks}   :: Write each line without line breaksmap<T>(callback: (key: string, value: any) => T): T[] {   :: Write each line without line breaksreturn Object.entries(this.data).map(([key, value]) =>   :: Write each line without line breakscallback(key, value),   :: Write each line without line breaks);   :: Write each line without line breaks}   :: Write each line without line breaksfilter(predicate: (key: string, value: any) => boolean): JSONModel {   :: Write each line without line breaksconst filteredData = Object.entries(this.data)   :: Write each line without line breaks.filter(([key, value]) => predicate(key, value))   :: Write each line without line breaks.reduce((acc, [key, value]) => {   :: Write each line without line breaksacc[key] = value;   :: Write each line without line breaksreturn acc;   :: Write each line without line breaks}, {});   :: Write each line without line breaksreturn new JSONModel(filteredData);   :: Write each line without line breaks}   :: Write each line without line breaksmerge(other: JSONModel | object): JSONModel {   :: Write each line without line breaksconst otherData = other instanceof JSONModel ? other.toJSON() : other;   :: Write each line without line breaksreturn new JSONModel({ ...this.data, ...otherData });   :: Write each line without line breaks}   :: Write each line without line breaksclone(): JSONModel {   :: Write each line without line breaksreturn new JSONModel(this.toJSON());   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\services\airline.service.ts

import { Injectable } from '@angular/core';   :: Write each line without line breaksimport { HttpClient } from '@angular/common/http';   :: Write each line without line breaksimport { Observable, of } from 'rxjs';   :: Write each line without line breaksimport { map, catchError } from 'rxjs/operators';   :: Write each line without line breaks@Injectable({   :: Write each line without line breaksprovidedIn: 'root',   :: Write each line without line breaks})   :: Write each line without line breaksexport class AirlineService {   :: Write each line without line breaksprivate airlines: any[] = [];   :: Write each line without line breaksconstructor(private http: HttpClient) {}   :: Write each line without line breaks// Method to load airline.json file   :: Write each line without line breaksloadAirlines(): Observable<any> {   :: Write each line without line breaksconsole.log("loadAirlines.start")   :: Write each line without line breaksreturn this.http.get('assets/Airline.json').pipe(   :: Write each line without line breaksmap((data: any[]) => {   :: Write each line without line breaksthis.airlines = data;   :: Write each line without line breaksreturn this.airlines;   :: Write each line without line breaks}),   :: Write each line without line breakscatchError((error) => {   :: Write each line without line breaksconsole.error('Error loading Airline.json:', error);   :: Write each line without line breaksreturn of([]); // Return an empty array on error   :: Write each line without line breaks}),   :: Write each line without line breaks);   :: Write each line without line breaksconsole.log("loadAirlines.end")   :: Write each line without line breaks}   :: Write each line without line breaks// Method to get airline by code   :: Write each line without line breaksgetAirlineByCode(code: string): any | undefined {   :: Write each line without line breaksreturn this.airlines.find((airline) => airline.code === code);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\services\airport.service.ts

import { Injectable } from '@angular/core';   :: Write each line without line breaksimport { HttpClient } from '@angular/common/http';   :: Write each line without line breaksimport { Observable, of } from 'rxjs';   :: Write each line without line breaksimport { map, catchError } from 'rxjs/operators';   :: Write each line without line breaks@Injectable({   :: Write each line without line breaksprovidedIn: 'root',   :: Write each line without line breaks})   :: Write each line without line breaksexport class AirportService {   :: Write each line without line breaksprivate airports: any[] = [];   :: Write each line without line breaksconstructor(private http: HttpClient) {}   :: Write each line without line breaks// Method to load airport.json file   :: Write each line without line breaksloadAirports(): Observable<any> {   :: Write each line without line breaksconsole.log("loadAirports.start")   :: Write each line without line breaksreturn this.http.get('assets/Airport.json').pipe(   :: Write each line without line breaksmap((data: any[]) => {   :: Write each line without line breaksthis.airports = data;   :: Write each line without line breaks// Log each airport as it's loaded   :: Write each line without line breaksthis.airports.forEach((airport, index) => {   :: Write each line without line breaks//console.log(`Airport ${index + 1}:`, airport);   :: Write each line without line breaks});   :: Write each line without line breaks//console.log('All airports loaded:', this.airports);  // Log the full airport list   :: Write each line without line breaksreturn this.airports;   :: Write each line without line breaks}),   :: Write each line without line breakscatchError((error) => {   :: Write each line without line breaksconsole.error('Error loading Airport.json:', error);   :: Write each line without line breaksreturn of([]); // Return an empty array on error   :: Write each line without line breaks}),   :: Write each line without line breaks);   :: Write each line without line breaksconsole.log("loadAirports.end")   :: Write each line without line breaks}   :: Write each line without line breaks// Method to get airport by code   :: Write each line without line breaksgetAirportByCode(code: string): any | undefined {   :: Write each line without line breaksconst airport = this.airports.find((airport) => airport.code === code);   :: Write each line without line breaks//console.log(`Looking up airport by code: ${code}`, airport);  // Debug: log airport lookup   :: Write each line without line breaksreturn airport;   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\services\data-facade.service.ts

// import { Injectable } from '@angular/core';   :: Write each line without line breaks// import { Observable, forkJoin } from 'rxjs';   :: Write each line without line breaks// import { map } from 'rxjs/operators';   :: Write each line without line breaks// import { AirportService } from './airport.service';   :: Write each line without line breaks// import { AirlineService } from './airline.service';   :: Write each line without line breaks// import { GeoModelService } from './geo-model.service';   :: Write each line without line breaks// import { GeoModel } from './geo-model';   :: Write each line without line breaks//   :: Write each line without line breaks// @Injectable({   :: Write each line without line breaks//   providedIn: 'root'   :: Write each line without line breaks// })   :: Write each line without line breaks// export class DataFacadeService {   :: Write each line without line breaks//   constructor(   :: Write each line without line breaks//     private airportService: AirportService,   :: Write each line without line breaks//     private airlineService: AirlineService,   :: Write each line without line breaks//     private geoModelService: GeoModelService   :: Write each line without line breaks//   ) {}   :: Write each line without line breaks//   :: Write each line without line breaks//   loadAllData(): Observable<{ geoModel: GeoModel, airports: any[], airlines: any[] }> {   :: Write each line without line breaks//     return forkJoin({   :: Write each line without line breaks//       airports: this.airportService.loadAirports(),   :: Write each line without line breaks//       airlines: this.airlineService.loadAirlines(),   :: Write each line without line breaks//       geoModel: this.geoModelService.loadData()   :: Write each line without line breaks//     }).pipe(   :: Write each line without line breaks//       map(({ airports, airlines, geoModel }) => {   :: Write each line without line breaks//         // Here you can add any cross-service logic if needed   :: Write each line without line breaks//         return { geoModel, airports, airlines };   :: Write each line without line breaks//       })   :: Write each line without line breaks//     );   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   getGeoModel(): Observable<GeoModel> {   :: Write each line without line breaks//     return this.geoModelService.getGeoModel();   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   getAirportByCode(code: string): any | undefined {   :: Write each line without line breaks//     return this.airportService.getAirportByCode(code);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   getAirlineByCode(code: string): any | undefined {   :: Write each line without line breaks//     return this.airlineService.getAirlineByCode(code);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   // Add other methods as needed to coordinate between services   :: Write each line without line breaks// }   :: Write each line without line breaks..
----------------------------------------
...
\src\app\services\data.service.spec.ts

// import { TestBed } from '@angular/core/testing';   :: Write each line without line breaks//   :: Write each line without line breaks// import { DataService } from './data.service';   :: Write each line without line breaks//   :: Write each line without line breaks// describe('DataService', () => {   :: Write each line without line breaks//   let service: DataService;   :: Write each line without line breaks//   :: Write each line without line breaks//   beforeEach(() => {   :: Write each line without line breaks//     TestBed.configureTestingModule({});   :: Write each line without line breaks//     service = TestBed.inject(DataService);   :: Write each line without line breaks//   });   :: Write each line without line breaks//   :: Write each line without line breaks//   it('should be created', () => {   :: Write each line without line breaks//     expect(service).toBeTruthy();   :: Write each line without line breaks//   });   :: Write each line without line breaks// });   :: Write each line without line breaks..
----------------------------------------
...
\src\app\services\data.service.ts

import { Injectable } from '@angular/core';   :: Write each line without line breaksimport { HttpClient } from '@angular/common/http';   :: Write each line without line breaksimport { Observable, BehaviorSubject, of } from 'rxjs';   :: Write each line without line breaksimport { map, catchError, tap } from 'rxjs/operators';   :: Write each line without line breaksimport { FeatureCollection } from 'geojson';   :: Write each line without line breaksimport { JSONModel } from '../models/json.model';   :: Write each line without line breaks@Injectable({   :: Write each line without line breaksprovidedIn: 'root',   :: Write each line without line breaks})   :: Write each line without line breaksexport class DataService {   :: Write each line without line breaksprivate geoDataSubject = new BehaviorSubject<FeatureCollection | null>(null);   :: Write each line without line breaksprivate jsonDataSubject = new BehaviorSubject<{ [key: string]: JSONModel }>(   :: Write each line without line breaks{},   :: Write each line without line breaks);   :: Write each line without line breaksgeoData$ = this.geoDataSubject.asObservable();   :: Write each line without line breaksjsonData$ = this.jsonDataSubject.asObservable();   :: Write each line without line breaksconstructor(private http: HttpClient) {}   :: Write each line without line breaksloadGeoJSON(url: string): Observable<FeatureCollection> {   :: Write each line without line breaksreturn this.http.get<FeatureCollection>(url).pipe(   :: Write each line without line breakstap((data) => console.log('Received GeoJSON data:', data)),   :: Write each line without line breakstap((data) => this.geoDataSubject.next(data)),   :: Write each line without line breakscatchError(this.handleError<FeatureCollection>('loadGeoJSON')),   :: Write each line without line breaks);   :: Write each line without line breaks}   :: Write each line without line breaksloadJSON(url: string, key: string): Observable<JSONModel> {   :: Write each line without line breaksreturn this.http.get(url).pipe(   :: Write each line without line breaksmap((data) => new JSONModel(data)),   :: Write each line without line breakstap((model) => {   :: Write each line without line breaksconst currentData = this.jsonDataSubject.value;   :: Write each line without line breaksthis.jsonDataSubject.next({ ...currentData, [key]: model });   :: Write each line without line breaks}),   :: Write each line without line breakscatchError(this.handleError<JSONModel>('loadJSON')),   :: Write each line without line breaks);   :: Write each line without line breaks}   :: Write each line without line breaksgetGeoData(): FeatureCollection | null {   :: Write each line without line breaksreturn this.geoDataSubject.value;   :: Write each line without line breaks}   :: Write each line without line breaksupdateGeoData(updatedData: FeatureCollection): void {   :: Write each line without line breaksthis.geoDataSubject.next(updatedData);   :: Write each line without line breaks}   :: Write each line without line breaksupdateJSONData(key: string, updatedData: JSONModel): void {   :: Write each line without line breaksconst currentData = this.jsonDataSubject.value;   :: Write each line without line breaksthis.jsonDataSubject.next({ ...currentData, [key]: updatedData });   :: Write each line without line breaks}   :: Write each line without line breaksprivate handleError<T>(operation = 'operation', result?: T) {   :: Write each line without line breaksreturn (error: any): Observable<T> => {   :: Write each line without line breaksconsole.error(`${operation} failed: ${error.message}`);   :: Write each line without line breaksreturn of(result as T);   :: Write each line without line breaks};   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\services\file.service.ts

import { Injectable } from '@angular/core';   :: Write each line without line breaksimport * as d3 from 'd3';  // Import D3   :: Write each line without line breaks@Injectable({   :: Write each line without line breaksprovidedIn: 'root'   :: Write each line without line breaks})   :: Write each line without line breaksexport class FileService {   :: Write each line without line breaksconstructor() {}   :: Write each line without line breaks// Method to load GeoJSON using D3   :: Write each line without line breaksloadGeoJSON(url: string): Promise<any> {   :: Write each line without line breaksreturn d3.json(url);  // Use D3 to load the GeoJSON data as a promise   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
\src\app\services\geo-model.service.spec.ts

// const { TestBed } = require('@angular/core/testing');   :: Write each line without line breaks// const { HttpClientTestingModule, HttpTestingController } = require('@angular/common/http/testing');   :: Write each line without line breaks// const { GeoModelService } = require('./geo-model.service');   :: Write each line without line breaks// const { AirportService } = require('./airport.service');   :: Write each line without line breaks// const { AirlineService } = require('./airline.service');   :: Write each line without line breaks// const { GeoModel } = require('../models/geo-model');   :: Write each line without line breaks// const { of } = require('rxjs');   :: Write each line without line breaks//   :: Write each line without line breaks// describe('GeoModelService', () => {   :: Write each line without line breaks//   let service;   :: Write each line without line breaks//   let httpMock;   :: Write each line without line breaks//   let airportServiceSpy;   :: Write each line without line breaks//   let airlineServiceSpy;   :: Write each line without line breaks//   :: Write each line without line breaks//   beforeEach(() => {   :: Write each line without line breaks//     const airportSpy = jasmine.createSpyObj('AirportService', ['loadAirports']);   :: Write each line without line breaks//     const airlineSpy = jasmine.createSpyObj('AirlineService', ['loadAirlines']);   :: Write each line without line breaks//   :: Write each line without line breaks//     TestBed.configureTestingModule({   :: Write each line without line breaks//       imports: [HttpClientTestingModule],   :: Write each line without line breaks//       providers: [   :: Write each line without line breaks//         GeoModelService,   :: Write each line without line breaks//         { provide: AirportService, useValue: airportSpy },   :: Write each line without line breaks//         { provide: AirlineService, useValue: airlineSpy }   :: Write each line without line breaks//       ]   :: Write each line without line breaks//     });   :: Write each line without line breaks//   :: Write each line without line breaks//     service = TestBed.inject(GeoModelService);   :: Write each line without line breaks//     httpMock = TestBed.inject(HttpTestingController);   :: Write each line without line breaks//     airportServiceSpy = TestBed.inject(AirportService);   :: Write each line without line breaks//     airlineServiceSpy = TestBed.inject(AirlineService);   :: Write each line without line breaks//   });   :: Write each line without line breaks//   :: Write each line without line breaks//   afterEach(() => {   :: Write each line without line breaks//     httpMock.verify();   :: Write each line without line breaks//   });   :: Write each line without line breaks//   :: Write each line without line breaks//   it('should be created', () => {   :: Write each line without line breaks//     expect(service).toBeTruthy();   :: Write each line without line breaks//   });   :: Write each line without line breaks//   :: Write each line without line breaks//   it('should load data', (done) => {   :: Write each line without line breaks//     const mockGeoJSON = {   :: Write each line without line breaks//       type: 'FeatureCollection',   :: Write each line without line breaks//       features: [{ type: 'Feature', geometry: { type: 'Point', coordinates: [0, 0] }, properties: {} }]   :: Write each line without line breaks//     };   :: Write each line without line breaks//     const mockAirports = [{ code: 'ABC', name: 'Test Airport', longitude: 0, latitude: 0 }];   :: Write each line without line breaks//     const mockAirlines = [{ code: 'XYZ', name: 'Test Airline' }];   :: Write each line without line breaks//   :: Write each line without line breaks//     airportServiceSpy.loadAirports.and.returnValue(of(mockAirports));   :: Write each line without line breaks//     airlineServiceSpy.loadAirlines.and.returnValue(of(mockAirlines));   :: Write each line without line breaks//   :: Write each line without line breaks//     service.loadData().subscribe(geoModel => {   :: Write each line without line breaks//       expect(geoModel).toBeTruthy();   :: Write each line without line breaks//       expect(geoModel.features.length).toBe(3); // 1 from GeoJSON, 1 from airports, 1 from airlines   :: Write each line without line breaks//       done();   :: Write each line without line breaks//     });   :: Write each line without line breaks//   :: Write each line without line breaks//     const req = httpMock.expectOne('assets/your-geojson-file.json');   :: Write each line without line breaks//     expect(req.request.method).toBe('GET');   :: Write each line without line breaks//     req.flush(mockGeoJSON);   :: Write each line without line breaks//   });   :: Write each line without line breaks//   :: Write each line without line breaks//   // Other test cases remain unchanged, just use require() instead of import   :: Write each line without line breaks//   // Continue with your existing tests below...   :: Write each line without line breaks// });   :: Write each line without line breaks..
----------------------------------------
...
\src\app\services\geo-model.service.ts

// import { Injectable } from '@angular/core';   :: Write each line without line breaks// import { HttpClient } from '@angular/common/http';   :: Write each line without line breaks// import { BehaviorSubject, Observable, forkJoin } from 'rxjs';   :: Write each line without line breaks// import { map, switchMap } from 'rxjs/operators';   :: Write each line without line breaks// import { GeoModel } from '../models/geo-model';   :: Write each line without line breaks// import { AirportService } from './airport.service';   :: Write each line without line breaks// import { AirlineService } from './airline.service';   :: Write each line without line breaks// import { Feature, FeatureCollection } from 'geojson';   :: Write each line without line breaks//   :: Write each line without line breaks// @Injectable({   :: Write each line without line breaks//   providedIn: 'root'   :: Write each line without line breaks// })   :: Write each line without line breaks// export class GeoModelService {   :: Write each line without line breaks//   private geoModel: GeoModel;   :: Write each line without line breaks//   private geoModelSubject: BehaviorSubject<GeoModel>;   :: Write each line without line breaks//   :: Write each line without line breaks//   constructor(   :: Write each line without line breaks//     private http: HttpClient,   :: Write each line without line breaks//     private airportService: AirportService,   :: Write each line without line breaks//     private airlineService: AirlineService   :: Write each line without line breaks//   ) {   :: Write each line without line breaks//     this.geoModel = new GeoModel({ type: 'FeatureCollection', features: [] });   :: Write each line without line breaks//     this.geoModelSubject = new BehaviorSubject<GeoModel>(this.geoModel);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   getGeoModel(): Observable<GeoModel> {   :: Write each line without line breaks//     return this.geoModelSubject.asObservable();   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   loadData(): Observable<GeoModel> {   :: Write each line without line breaks//     return forkJoin({   :: Write each line without line breaks//       airports: this.airportService.loadAirports(),   :: Write each line without line breaks//       airlines: this.airlineService.loadAirlines(),   :: Write each line without line breaks//       geoJSON: this.loadGeoJSON()   :: Write each line without line breaks//     }).pipe(   :: Write each line without line breaks//       switchMap(({ airports, airlines, geoJSON }) => {   :: Write each line without line breaks//         this.geoModel = new GeoModel(geoJSON);   :: Write each line without line breaks//         this.createFeaturesFromAirports(airports);   :: Write each line without line breaks//         this.addAirlineInfoToFeatures(airlines);   :: Write each line without line breaks//         this.geoModelSubject.next(this.geoModel);   :: Write each line without line breaks//         return this.getGeoModel();   :: Write each line without line breaks//       })   :: Write each line without line breaks//     );   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   private loadGeoJSON(): Observable<FeatureCollection> {   :: Write each line without line breaks//     return this.http.get<FeatureCollection>('assets/your-geojson-file.json');   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   private createFeaturesFromAirports(airports: any[]): void {   :: Write each line without line breaks//     const airportFeatures = airports.map(airport => ({   :: Write each line without line breaks//       type: 'Feature',   :: Write each line without line breaks//       geometry: {   :: Write each line without line breaks//         type: 'Point',   :: Write each line without line breaks//         coordinates: [airport.longitude, airport.latitude]   :: Write each line without line breaks//       },   :: Write each line without line breaks//       properties: {   :: Write each line without line breaks//         type: 'airport',   :: Write each line without line breaks//         code: airport.code,   :: Write each line without line breaks//         name: airport.name,   :: Write each line without line breaks//         city: airport.city,   :: Write each line without line breaks//         country: airport.country   :: Write each line without line breaks//       }   :: Write each line without line breaks//     } as Feature));   :: Write each line without line breaks//   :: Write each line without line breaks//     this.geoModel.addFeatures(airportFeatures);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   private addAirlineInfoToFeatures(airlines: any[]): void {   :: Write each line without line breaks//     const airlineFeatures = airlines.map(airline => ({   :: Write each line without line breaks//       type: 'Feature',   :: Write each line without line breaks//       geometry: null,   :: Write each line without line breaks//       properties: {   :: Write each line without line breaks//         type: 'airline',   :: Write each line without line breaks//         code: airline.code,   :: Write each line without line breaks//         name: airline.name,   :: Write each line without line breaks//         country: airline.country   :: Write each line without line breaks//       }   :: Write each line without line breaks//     } as Feature));   :: Write each line without line breaks//   :: Write each line without line breaks//     this.geoModel.addFeatures(airlineFeatures);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   filterFeatures(filterFunction: (feature: Feature) => boolean): void {   :: Write each line without line breaks//     const filteredFeatures = this.geoModel.features.filter(filterFunction);   :: Write each line without line breaks//     this.geoModel = new GeoModel({   :: Write each line without line breaks//       type: 'FeatureCollection',   :: Write each line without line breaks//       features: filteredFeatures   :: Write each line without line breaks//     });   :: Write each line without line breaks//     this.geoModelSubject.next(this.geoModel);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   updateFeature(id: string | number, updatedProperties: any): void {   :: Write each line without line breaks//     this.geoModel.updateFeature(id, { properties: updatedProperties });   :: Write each line without line breaks//     this.geoModelSubject.next(this.geoModel);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   getFeatureById(id: string | number): Feature | undefined {   :: Write each line without line breaks//     return this.geoModel.getFeatureById(id);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   getFeaturesByProperty(key: string, value: any): Feature[] {   :: Write each line without line breaks//     return this.geoModel.getFeaturesByProperty(key, value);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   addFeature(feature: Feature): void {   :: Write each line without line breaks//     this.geoModel.addFeature(feature);   :: Write each line without line breaks//     this.geoModelSubject.next(this.geoModel);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   removeFeature(id: string | number): void {   :: Write each line without line breaks//     this.geoModel.removeFeature(id);   :: Write each line without line breaks//     this.geoModelSubject.next(this.geoModel);   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   getPropertyKeys(): string[] {   :: Write each line without line breaks//     return this.geoModel.getPropertyKeys();   :: Write each line without line breaks//   }   :: Write each line without line breaks//   :: Write each line without line breaks//   getBounds(): [number, number, number, number] | null {   :: Write each line without line breaks//     return this.geoModel.getBounds();   :: Write each line without line breaks//   }   :: Write each line without line breaks// }   :: Write each line without line breaks..
----------------------------------------
...
\src\app\utils\geo-feature.util.ts

import { Feature, LineString } from 'geojson';   :: Write each line without line breaksimport * as d3 from 'd3-geo';   :: Write each line without line breaksimport { AirportService } from '../services/airport.service';   :: Write each line without line breaksimport { AirlineService } from '../services/airline.service';   :: Write each line without line breaksexport function createGreatCircleFeature(   :: Write each line without line breakscityPair: any,   :: Write each line without line breaksairportService: AirportService,   :: Write each line without line breaksairlineService: AirlineService   :: Write each line without line breaks): Feature<LineString> | null {   :: Write each line without line breaks//console.log('Looking up base airport:', cityPair.base);   :: Write each line without line breaksconst baseAirport = airportService.getAirportByCode(cityPair.base);   :: Write each line without line breaks//console.log('Looking up ref airport:', cityPair.ref);   :: Write each line without line breaksconst refAirport = airportService.getAirportByCode(cityPair.ref);   :: Write each line without line breaksif (refAirport) {   :: Write each line without line breaks//console.error('Airport not found for base or ref:', cityPair.base, cityPair.ref);   :: Write each line without line breaksreturn null;   :: Write each line without line breaks}   :: Write each line without line breaksconst baseCoords: [number, number] = [baseAirport.lon, baseAirport.lat];   :: Write each line without line breaksconst refCoords: [number, number] = [refAirport.lon, refAirport.lat];   :: Write each line without line breaksconst greatCircle = d3.geoInterpolate(baseCoords, refCoords);   :: Write each line without line breaksconst steps = 50;   :: Write each line without line breaksconst pathCoords = Array.from({ length: steps + 1 }, (_, i) => greatCircle(i / steps));   :: Write each line without line breaksconst feature: Feature<LineString> = {   :: Write each line without line breakstype: 'Feature',   :: Write each line without line breaksgeometry: {   :: Write each line without line breakstype: 'LineString',   :: Write each line without line breakscoordinates: pathCoords   :: Write each line without line breaks},   :: Write each line without line breaksproperties: {   :: Write each line without line breaksbase: baseAirport.code,   :: Write each line without line breaksref: refAirport.code,   :: Write each line without line breaksbaseName: baseAirport.name,   :: Write each line without line breaksrefName: refAirport.name,   :: Write each line without line breaksairline: airlineService.getAirlineByCode(cityPair.al)?.name || 'Unknown Airline',   :: Write each line without line breaksdistance: d3.geoDistance(baseCoords, refCoords),   :: Write each line without line breakslayer: 'puck'   :: Write each line without line breaks}   :: Write each line without line breaks};   :: Write each line without line breaksreturn feature;   :: Write each line without line breaks}   :: Write each line without line breaks..
----------------------------------------
...
