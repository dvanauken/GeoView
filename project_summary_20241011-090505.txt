\src\app\app.component.spec.ts

import { TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { RouterTestingModule } from '@angular/router/testing';   :: Write each line without line breaksimport { AppComponent } from './app.component';   :: Write each line without line breaksdescribe('AppComponent', () => {   :: Write each line without line breaksbeforeEach(() =>   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksimports: [RouterTestingModule],   :: Write each line without line breaksdeclarations: [AppComponent],   :: Write each line without line breaks}),   :: Write each line without line breaks);   :: Write each line without line breaksit('should create the app', () => {   :: Write each line without line breaksconst fixture = TestBed.createComponent(AppComponent);   :: Write each line without line breaksconst app = fixture.componentInstance;   :: Write each line without line breaksexpect(app).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaksit(`should have as title 'GeoView'`, () => {   :: Write each line without line breaksconst fixture = TestBed.createComponent(AppComponent);   :: Write each line without line breaksconst app = fixture.componentInstance;   :: Write each line without line breaksexpect(app.title).toEqual('GeoView');   :: Write each line without line breaks});   :: Write each line without line breaksit('should render title', () => {   :: Write each line without line breaksconst fixture = TestBed.createComponent(AppComponent);   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaksconst compiled = fixture.nativeElement as HTMLElement;   :: Write each line without line breaksexpect(compiled.querySelector('.content span')?.textContent).toContain(   :: Write each line without line breaks'GeoView app is running: Write each line without line breaks);   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks.
----------------------------------------
file
\src\app\app.component.ts

import { Component, OnInit, OnDestroy } from '@angular/core';   :: Write each line without line breaksimport { Feature, FeatureCollection, LineString } from 'geojson';   :: Write each line without line breaksimport { AirportService } from './services/airport.service';   :: Write each line without line breaksimport { AirlineService } from './services/airline.service';   :: Write each line without line breaksimport { createGreatCircleFeature } from './utils/geo-feature.util';   :: Write each line without line breaksimport * as d3 from 'd3';   :: Write each line without line breaksimport { BehaviorSubject, Subscription } from 'rxjs';   :: Write each line without line breaksinterface CityPair {   :: Write each line without line breaksal: string;    // Airline code   :: Write each line without line breaksbase: string;  // Base airport code   :: Write each line without line breaksref: string;   // Reference (destination) airport code   :: Write each line without line breaks}   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-root',   :: Write each line without line breakstemplate: '<app-geo-view [geoData]="geoData$ | async"></app-geo-view>'   :: Write each line without line breaks})   :: Write each line without line breaksexport class AppComponent implements OnInit, OnDestroy {   :: Write each line without line breaksprivate geoDataSubject = new BehaviorSubject<FeatureCollection | null>(null);   :: Write each line without line breaksgeoData$ = this.geoDataSubject.asObservable();   :: Write each line without line breaksisLoadingCityPairs: boolean = false;   :: Write each line without line breaksprivate subscription: Subscription = new Subscription();   :: Write each line without line breaksconstructor(   :: Write each line without line breaksprivate airportService: AirportService,   :: Write each line without line breaksprivate airlineService: AirlineService   :: Write each line without line breaks) {}   :: Write each line without line breaksngOnInit() {   :: Write each line without line breaksthis.loadGeoJSON();   :: Write each line without line breaksthis.loadCityPairData(['XP']); // Load data for ZX airline   :: Write each line without line breaks}   :: Write each line without line breaksngOnDestroy() {   :: Write each line without line breaksthis.subscription.unsubscribe();   :: Write each line without line breaks}   :: Write each line without line breaksprivate loadGeoJSON() {   :: Write each line without line breaksd3.json('assets/110m/countries.geojson').then((data: any) => {   :: Write each line without line breaksconst geoData = data as FeatureCollection;   :: Write each line without line breaksthis.geoDataSubject.next(geoData);   :: Write each line without line breaksconsole.log('GeoData loaded:', geoData);   :: Write each line without line breaks}).catch((error) => {   :: Write each line without line breaksconsole.error('Error loading GeoJSON:', error);   :: Write each line without line breaks});   :: Write each line without line breaks}   :: Write each line without line breaksloadCityPairData(airlinesToInclude: string[] = ['XP']) {   :: Write each line without line breaksthis.isLoadingCityPairs = true;   :: Write each line without line breaksd3.json('assets/citypair.20240823.json').then((data: any) => {   :: Write each line without line breaksconsole.log('Raw City Pair Data:', data);   :: Write each line without line breaksconst cityPairs: CityPair[] = Array.isArray(data) ? data : [];   :: Write each line without line breaksconsole.log(`Total city pairs loaded: ${cityPairs.length}`);   :: Write each line without line breaksthis.logAirlineCounts(cityPairs);   :: Write each line without line breaksconst filteredData = this.filterCityPairs(cityPairs, airlinesToInclude);   :: Write each line without line breaksconsole.log(`Filtered city pairs: ${filteredData.length}`);   :: Write each line without line breaksconsole.log('First few filtered city pairs:', filteredData.slice(0, 5));   :: Write each line without line breaksconst features = this.createFeatures(filteredData);   :: Write each line without line breaksconsole.log(`Created ${features.length} features`);   :: Write each line without line breaksthis.updateGeoData(features);   :: Write each line without line breaksthis.isLoadingCityPairs = false;   :: Write each line without line breaks}).catch((error) => {   :: Write each line without line breaksconsole.error('Error loading citypair.20240823.json:', error);   :: Write each line without line breaksthis.isLoadingCityPairs = false;   :: Write each line without line breaks});   :: Write each line without line breaks}   :: Write each line without line breaksprivate logAirlineCounts(cityPairs: CityPair[]) {   :: Write each line without line breaksconst airlineCounts = cityPairs.reduce((acc, pair) => {   :: Write each line without line breaksacc[pair.al] = (acc[pair.al] || 0) + 1;   :: Write each line without line breaksreturn acc;   :: Write each line without line breaks}, {} as Record<string, number>);   :: Write each line without line breaksconsole.log('Airline counts:', airlineCounts);   :: Write each line without line breaks}   :: Write each line without line breaksprivate filterCityPairs(cityPairs: CityPair[], airlinesToInclude: string[]): CityPair[] {   :: Write each line without line breaksreturn cityPairs.filter(cityPair => airlinesToInclude.includes(cityPair.al));   :: Write each line without line breaks}   :: Write each line without line breaksprivate createFeatures(filteredData: CityPair[]): Feature<LineString>[] {   :: Write each line without line breaksreturn filteredData.map((cityPair, index) => {   :: Write each line without line breaksconsole.log(`Processing city pair ${index}:`, cityPair);   :: Write each line without line breaksconst feature = createGreatCircleFeature(cityPair, this.airportService, this.airlineService);   :: Write each line without line breaksif (: Write each line without line breaksconsole.warn(`Failed to create feature for city pair:`, cityPair);   :: Write each line without line breaks}   :: Write each line without line breaksreturn feature;   :: Write each line without line breaks}).filter((f): f is NonNullable<ReturnType<typeof createGreatCircleFeature>> => f : Write each line without line breaks}   :: Write each line without line breaksprivate updateGeoData(features: Feature<LineString>[]) {   :: Write each line without line breaksconst currentGeoData = this.geoDataSubject.value;   :: Write each line without line breaksif (currentGeoData) {   :: Write each line without line breaksconst updatedGeoData: FeatureCollection = {   :: Write each line without line breaks...currentGeoData,   :: Write each line without line breaksfeatures: [...currentGeoData.features, ...features]   :: Write each line without line breaks};   :: Write each line without line breaksthis.geoDataSubject.next(updatedGeoData);   :: Write each line without line breaks} else {   :: Write each line without line breaksconst newGeoData: FeatureCollection = {   :: Write each line without line breakstype: 'FeatureCollection',   :: Write each line without line breaksfeatures: features   :: Write each line without line breaks};   :: Write each line without line breaksthis.geoDataSubject.next(newGeoData);   :: Write each line without line breaks}   :: Write each line without line breaksconsole.log('Updated geoData with city pairs:', this.geoDataSubject.value);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\app.module.ts

import { NgModule, APP_INITIALIZER } from '@angular/core';   :: Write each line without line breaksimport { BrowserModule } from '@angular/platform-browser';   :: Write each line without line breaksimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';   :: Write each line without line breaksimport { HttpClientModule } from '@angular/common/http';   :: Write each line without line breaksimport { FormsModule, ReactiveFormsModule } from '@angular/forms';   :: Write each line without line breaksimport { AppRoutingModule } from './app-routing.module';   :: Write each line without line breaksimport { AppComponent } from './app.component';   :: Write each line without line breaksimport { SharedModule } from './shared/shared.module';   :: Write each line without line breaks// GeoView Components   :: Write each line without line breaksimport { GeoViewComponent } from './components/geo-view/geo-view.component';   :: Write each line without line breaksimport { MapComponent } from './components/geo-view/map/map.component';   :: Write each line without line breaksimport { TableComponent } from './components/geo-view/table/table.component';   :: Write each line without line breaksimport { LayersComponent } from './components/geo-view/layers/layers.component';   :: Write each line without line breaksimport { SliderComponent } from './components/geo-view/slider/slider.component';   :: Write each line without line breaksimport { AirportService } from './services/airport.service';   :: Write each line without line breaksimport { AirlineService } from './services/airline.service';   :: Write each line without line breaks// Function to preload airport and airline data   :: Write each line without line breaks// Function to preload airport and airline data   :: Write each line without line breaksexport function preloadData(   :: Write each line without line breaksairportService: AirportService,   :: Write each line without line breaksairlineService: AirlineService   :: Write each line without line breaks) {   :: Write each line without line breaksreturn () =>   :: Write each line without line breaksPromise.all([   :: Write each line without line breaksairportService.loadAirports().toPromise().then(() => {   :: Write each line without line breaksconsole.log('Airports preloaded successfully');   :: Write each line without line breaks}),   :: Write each line without line breaksairlineService.loadAirlines().toPromise().then(() => {   :: Write each line without line breaksconsole.log('Airlines preloaded successfully');   :: Write each line without line breaks})   :: Write each line without line breaks]);   :: Write each line without line breaks}   :: Write each line without line breaks@NgModule({   :: Write each line without line breaksdeclarations: [   :: Write each line without line breaksAppComponent,   :: Write each line without line breaksGeoViewComponent,   :: Write each line without line breaksMapComponent,   :: Write each line without line breaksTableComponent,   :: Write each line without line breaksLayersComponent,   :: Write each line without line breaksSliderComponent,   :: Write each line without line breaks],   :: Write each line without line breaksimports: [   :: Write each line without line breaksBrowserModule,   :: Write each line without line breaksBrowserAnimationsModule,   :: Write each line without line breaksHttpClientModule,   :: Write each line without line breaksFormsModule,   :: Write each line without line breaksReactiveFormsModule,   :: Write each line without line breaksAppRoutingModule,   :: Write each line without line breaksSharedModule,   :: Write each line without line breaks],   :: Write each line without line breaksproviders: [   :: Write each line without line breaksAirportService,   :: Write each line without line breaksAirlineService,   :: Write each line without line breaks{   :: Write each line without line breaksprovide: APP_INITIALIZER,   :: Write each line without line breaksuseFactory: preloadData,   :: Write each line without line breaksdeps: [AirportService, AirlineService],   :: Write each line without line breaksmulti: true,   :: Write each line without line breaks},   :: Write each line without line breaks],   :: Write each line without line breaksbootstrap: [AppComponent],   :: Write each line without line breaks})   :: Write each line without line breaksexport class AppModule {}   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\app.component.html

<div class="geo-view-container">   :: Write each line without line breaks<: Write each line without line breaks<div *ngIf="isLoadingCityPairs" class="loading-overlay">   :: Write each line without line breaks<p>Loading city pairs...</p>   :: Write each line without line breaks</div>   :: Write each line without line breaks<: Write each line without line breaks<app-layers></app-layers>   :: Write each line without line breaks<div class="main-content">   :: Write each line without line breaks<app-map></app-map>   :: Write each line without line breaks<app-slider (positionChange)="onSliderMove($event)"></app-slider>   :: Write each line without line breaks<app-table></app-table>   :: Write each line without line breaks</div>   :: Write each line without line breaks</div>   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\geo-view.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { GeoViewComponent } from './geo-view.component';   :: Write each line without line breaksdescribe('GeoViewComponent', () => {   :: Write each line without line breakslet component: GeoViewComponent;   :: Write each line without line breakslet fixture: ComponentFixture<GeoViewComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [GeoViewComponent],   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(GeoViewComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\geo-view.component.ts

// src/app/components/geo-view/geo-view.component.ts   :: Write each line without line breaksimport {   :: Write each line without line breaksComponent,   :: Write each line without line breaksOnInit,   :: Write each line without line breaksViewChild,   :: Write each line without line breaksAfterViewInit,   :: Write each line without line breaksOnDestroy,   :: Write each line without line breaksInput,   :: Write each line without line breaksOnChanges,   :: Write each line without line breaksSimpleChanges,   :: Write each line without line breaksElementRef,   :: Write each line without line breaks} from '@angular/core';   :: Write each line without line breaksimport { MapComponent } from './map/map.component';   :: Write each line without line breaksimport { TableComponent } from './table/table.component';   :: Write each line without line breaksimport { SliderComponent } from './slider/slider.component';   :: Write each line without line breaksimport { LayersComponent } from './layers/layers.component';   :: Write each line without line breaksimport { DataService } from '../../services/data.service';   :: Write each line without line breaksimport { GeoModel } from '../../models/geo-model';   :: Write each line without line breaksimport { CriteriaModel } from '../../models/criteria.model';   :: Write each line without line breaksimport { ModelListener } from '../../interfaces/model-listener';   :: Write each line without line breaksimport { SelectionListener } from '../../interfaces/selection-listener';   :: Write each line without line breaksimport { FilterListener } from '../../interfaces/filter-listener';   :: Write each line without line breaksimport { Feature, FeatureCollection } from 'geojson'; // Import correct types   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-geo-view',   :: Write each line without line breakstemplateUrl: './geo-view.component.html',   :: Write each line without line breaksstyleUrls: ['./geo-view.component.scss'],   :: Write each line without line breaks})   :: Write each line without line breaksexport class GeoViewComponent   :: Write each line without line breaksimplements   :: Write each line without line breaksOnInit,   :: Write each line without line breaksAfterViewInit,   :: Write each line without line breaksOnDestroy,   :: Write each line without line breaksOnChanges,   :: Write each line without line breaksModelListener,   :: Write each line without line breaksSelectionListener,   :: Write each line without line breaksFilterListener   :: Write each line without line breaks{   :: Write each line without line breaks@ViewChild(MapComponent) mapComponent: MapComponent;   :: Write each line without line breaks@ViewChild(TableComponent) tableComponent: TableComponent;   :: Write each line without line breaks//@ViewChild(SliderComponent) sliderComponent: SliderComponent;   :: Write each line without line breaks@ViewChild(SliderComponent, { static: false }) slider: ElementRef; // Access slider element   :: Write each line without line breaks@ViewChild(LayersComponent) layersComponent: LayersComponent;   :: Write each line without line breaks@Input() geoData: FeatureCollection | null = null; // Use FeatureCollection from geojson   :: Write each line without line breaksmodel: GeoModel | null = null;   :: Write each line without line breaksmapWidth: number = 50; // Initial width of the map as 50%   :: Write each line without line breakstableWidth: number = 50; // Initial width of the table as 50%   :: Write each line without line breaksisDragging = false;   :: Write each line without line breaksconstructor(   :: Write each line without line breaksprivate dataService: DataService,   :: Write each line without line breaksprivate elRef: ElementRef,   :: Write each line without line breaks) {}   :: Write each line without line breaksngOnInit() {   :: Write each line without line breaks// Initialization logic if needed   :: Write each line without line breaks}   :: Write each line without line breaksngAfterViewInit(): void {   :: Write each line without line breaksconst slider = this.elRef.nativeElement.querySelector('#slider');   :: Write each line without line breaksconst mainContent = this.elRef.nativeElement.querySelector('.main-content');   :: Write each line without line breaksslider.addEventListener('mousedown', (e: MouseEvent) => {   :: Write each line without line breaksthis.isDragging = true;   :: Write each line without line breaksdocument.addEventListener('mousemove', this.onDrag.bind(this));   :: Write each line without line breaksdocument.addEventListener('mouseup', this.stopDrag.bind(this));   :: Write each line without line breaks});   :: Write each line without line breaks}   :: Write each line without line breaksonDrag(event: MouseEvent): void {   :: Write each line without line breaksif (: Write each line without line breaksconst mainContent = this.elRef.nativeElement.querySelector('.main-content');   :: Write each line without line breaksconst mainContentRect = mainContent.getBoundingClientRect();   :: Write each line without line breaks// Get new width for app-map based on slider position   :: Write each line without line breaksconst offsetX = event.clientX - mainContentRect.left;   :: Write each line without line breaksconst mapWidthPercentage = (offsetX / mainContentRect.width) * 100;   :: Write each line without line breaksconst tableWidthPercentage = 100 - mapWidthPercentage;   :: Write each line without line breaks// Update map and table widths   :: Write each line without line breaksthis.elRef.nativeElement.querySelector('app-map').style.width =   :: Write each line without line breaks`${mapWidthPercentage}%`;   :: Write each line without line breaksthis.elRef.nativeElement.querySelector('app-table').style.width =   :: Write each line without line breaks`${tableWidthPercentage}%`;   :: Write each line without line breaks}   :: Write each line without line breaksstopDrag(): void {   :: Write each line without line breaksthis.isDragging = false;   :: Write each line without line breaksdocument.removeEventListener('mousemove', this.onDrag.bind(this));   :: Write each line without line breaksdocument.removeEventListener('mouseup', this.stopDrag.bind(this));   :: Write each line without line breaks}   :: Write each line without line breaks//   ngAfterViewInit(): void {   :: Write each line without line breaks//     // Listen to slider position changes   :: Write each line without line breaks//     this.sliderComponent.positionChange.subscribe((position: number) => {   :: Write each line without line breaks//       this.adjustLayout(position);   :: Write each line without line breaks//     });   :: Write each line without line breaks//   }   :: Write each line without line breaks//   adjustLayout(sliderPosition: number): void {   :: Write each line without line breaks//     // Calculate the width for app-map and app-table based on slider position   :: Write each line without line breaks//     this.mapWidth = sliderPosition;   :: Write each line without line breaks//     this.tableWidth = 100 - sliderPosition;   :: Write each line without line breaks//   :: Write each line without line breaks//     // Apply new widths dynamically (if using inline styles)   :: Write each line without line breaks//     this.mapComponent.elementRef.nativeElement.style.width = `${this.mapWidth}%`;   :: Write each line without line breaks//     this.tableComponent.elementRef.nativeElement.style.width = `${this.tableWidth}%`;   :: Write each line without line breaks//   }   :: Write each line without line breaksngOnChanges(changes: SimpleChanges) {   :: Write each line without line breaksif (changes['geoData'] && this.geoData) {   :: Write each line without line breaksconsole.log('GeoView received data:', this.geoData);   :: Write each line without line breaksthis.updateModel();   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks//ngAfterViewInit(): void {   :: Write each line without line breaks//  this.setupChildInteractions();   :: Write each line without line breaks//}   :: Write each line without line breaksngOnDestroy(): void {   :: Write each line without line breaks// Cleanup any subscriptions or resources   :: Write each line without line breaks}   :: Write each line without line breaksprivate updateModel(): void {   :: Write each line without line breaksif (this.geoData) {   :: Write each line without line breaks// Directly use FeatureCollection from GeoJSON   :: Write each line without line breaksthis.model = new GeoModel(this.geoData);   :: Write each line without line breaksthis.onModelChange(this.model);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksonModelChange(model: GeoModel): void {   :: Write each line without line breaksthis.model = model;   :: Write each line without line breaksif (this.mapComponent) {   :: Write each line without line breaksthis.mapComponent.onModelChange(model);   :: Write each line without line breaks}   :: Write each line without line breaksif (this.tableComponent) {   :: Write each line without line breaksthis.tableComponent.onModelChange(model);   :: Write each line without line breaks}   :: Write each line without line breaks// Update other components as needed   :: Write each line without line breaks}   :: Write each line without line breaksonFeatureUpdate(featureId: string, properties: { [key: string]: any }): void {   :: Write each line without line breaksif (this.model) {   :: Write each line without line breaksconst feature = this.model.getFeatureById(featureId);   :: Write each line without line breaksif (feature) {   :: Write each line without line breaksObject.assign(feature.properties, properties);   :: Write each line without line breaksthis.mapComponent?.onFeatureUpdate(featureId, properties);   :: Write each line without line breaksthis.tableComponent?.onFeatureUpdate(featureId, properties);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksonSelect(feature: Feature): void {   :: Write each line without line breaksthis.mapComponent?.onSelect(feature);   :: Write each line without line breaksthis.tableComponent?.onSelect(feature);   :: Write each line without line breaks}   :: Write each line without line breaksonDeselect(feature: Feature): void {   :: Write each line without line breaksthis.mapComponent?.onDeselect(feature);   :: Write each line without line breaksthis.tableComponent?.onDeselect(feature);   :: Write each line without line breaks}   :: Write each line without line breaksonClearSelection(): void {   :: Write each line without line breaksthis.mapComponent?.onClearSelection();   :: Write each line without line breaksthis.tableComponent?.onClearSelection();   :: Write each line without line breaks}   :: Write each line without line breaksonFilter(criteria: CriteriaModel): void {   :: Write each line without line breaksthis.mapComponent?.onFilter(criteria);   :: Write each line without line breaks// this.tableComponent?.onFilter(criteria); // Uncomment when table filtering is implemented   :: Write each line without line breaks}   :: Write each line without line breaksonClearFilter(): void {   :: Write each line without line breaksthis.mapComponent?.onClearFilter();   :: Write each line without line breaks// this.tableComponent?.onClearFilter(); // Uncomment when table filtering is implemented   :: Write each line without line breaks}   :: Write each line without line breaksonSliderMove(position: number): void {   :: Write each line without line breaksconst mapWidth = position;   :: Write each line without line breaksconst currentHeight = this.elRef.nativeElement.offsetHeight; // Keep the current height   :: Write each line without line breaksthis.mapComponent.resize(mapWidth, currentHeight); // Call the resize method on MapComponent   :: Write each line without line breaks}   :: Write each line without line breaksprivate setupChildInteractions(): void {   :: Write each line without line breaks// Setup any necessary interactions or event subscriptions between child components   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\geo-view.component.html

<div class="geo-view-container">   :: Write each line without line breaks<app-layers [geoData]="geoData"></app-layers>   :: Write each line without line breaks<div class="main-content">   :: Write each line without line breaks<app-map></app-map>   :: Write each line without line breaks<div id="slider" class="slider"></div>   :: Write each line without line breaks<: Write each line without line breaks<: Write each line without line breaks<app-slider (positionChange)="onSliderMove($event)"></app-slider>   :: Write each line without line breaks-->   :: Write each line without line breaks<app-table></app-table>   :: Write each line without line breaks</div>   :: Write each line without line breaks</div>   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\layers\layers.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { LayersComponent } from './layers.component';   :: Write each line without line breaksdescribe('LayersComponent', () => {   :: Write each line without line breakslet component: LayersComponent;   :: Write each line without line breakslet fixture: ComponentFixture<LayersComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [LayersComponent],   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(LayersComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\layers\layers.component.ts

import { Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';   :: Write each line without line breaksimport { FeatureCollection, Feature } from 'geojson'; // Correct types   :: Write each line without line breaksimport { DataService } from '../../../services/data.service';   :: Write each line without line breaksinterface Layer {   :: Write each line without line breaksid: string;   :: Write each line without line breaksname: string;   :: Write each line without line breakstype: 'geojson' | 'raster' | 'vector';   :: Write each line without line breaksvisible: boolean;   :: Write each line without line breaksopacity: number;   :: Write each line without line breaks}   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-layers',   :: Write each line without line breakstemplateUrl: './layers.component.html',   :: Write each line without line breaksstyleUrls: ['./layers.component.scss'],   :: Write each line without line breaks})   :: Write each line without line breaksexport class LayersComponent implements OnInit, OnDestroy, OnChanges {   :: Write each line without line breaks@Input() geoData: FeatureCollection | null = null; // Use this as input from parent   :: Write each line without line breakslayers: Layer[] = []; // Define layers   :: Write each line without line breaksconstructor(private dataService: DataService) {}   :: Write each line without line breaksngOnInit(): void {   :: Write each line without line breaks// Initialization logic if necessary   :: Write each line without line breaks}   :: Write each line without line breaksngOnDestroy(): void {   :: Write each line without line breaks// Cleanup any subscriptions or resources if necessary   :: Write each line without line breaks}   :: Write each line without line breaksngOnChanges(changes: SimpleChanges): void {   :: Write each line without line breaksif (changes['geoData'] && this.geoData) {   :: Write each line without line breaksthis.updateLayersFromGeoData(this.geoData);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breakstoggleLayerVisibility(layer: Layer): void {   :: Write each line without line breakslayer.visible = : Write each line without line breaksthis.updateLayer(layer);   :: Write each line without line breaks}   :: Write each line without line breaksupdateLayerOpacity(layer: Layer, event: Event): void {   :: Write each line without line breaksconst inputElement = event.target as HTMLInputElement;   :: Write each line without line breaksif (inputElement) {   :: Write each line without line breakslayer.opacity = inputElement.valueAsNumber;   :: Write each line without line breaksthis.updateLayer(layer);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksmoveLayerUp(index: number): void {   :: Write each line without line breaksif (index > 0) {   :: Write each line without line breaks[this.layers[index - 1], this.layers[index]] = [   :: Write each line without line breaksthis.layers[index],   :: Write each line without line breaksthis.layers[index - 1],   :: Write each line without line breaks];   :: Write each line without line breaksthis.updateLayerOrder();   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksmoveLayerDown(index: number): void {   :: Write each line without line breaksif (index < this.layers.length - 1) {   :: Write each line without line breaks[this.layers[index], this.layers[index + 1]] = [   :: Write each line without line breaksthis.layers[index + 1],   :: Write each line without line breaksthis.layers[index],   :: Write each line without line breaks];   :: Write each line without line breaksthis.updateLayerOrder();   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksprivate updateLayer(layer: Layer): void {   :: Write each line without line breaksif (this.geoData) {   :: Write each line without line breaksconst updatedFeatures = this.geoData.features.map((feature) => {   :: Write each line without line breaksif (feature.id?.toString() === layer.id) {   :: Write each line without line breaksreturn {   :: Write each line without line breaks...feature,   :: Write each line without line breaksproperties: {   :: Write each line without line breaks...feature.properties,   :: Write each line without line breaksvisible: layer.visible,   :: Write each line without line breaksopacity: layer.opacity,   :: Write each line without line breaks},   :: Write each line without line breaks};   :: Write each line without line breaks}   :: Write each line without line breaksreturn feature;   :: Write each line without line breaks});   :: Write each line without line breaksconst updatedGeoData: FeatureCollection = {   :: Write each line without line breakstype: 'FeatureCollection',   :: Write each line without line breaksfeatures: updatedFeatures,   :: Write each line without line breaks};   :: Write each line without line breaksthis.dataService.updateGeoData(updatedGeoData); // Update via service   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksprivate updateLayerOrder(): void {   :: Write each line without line breaksif (this.geoData) {   :: Write each line without line breaksconst orderedFeatures = this.layers   :: Write each line without line breaks.map((layer) =>   :: Write each line without line breaksthis.geoData: Write each line without line breaks)   :: Write each line without line breaks.filter((feature): feature is Feature => : Write each line without line breaksconst updatedGeoData: FeatureCollection = {   :: Write each line without line breakstype: 'FeatureCollection',   :: Write each line without line breaksfeatures: orderedFeatures,   :: Write each line without line breaks};   :: Write each line without line breaksthis.dataService.updateGeoData(updatedGeoData);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks/**   :: Write each line without line breaks* Group features into logical layers.   :: Write each line without line breaks* For example, group all "Polygon" features into one layer,   :: Write each line without line breaks* or group based on properties like feature type or another field.   :: Write each line without line breaks*/   :: Write each line without line breaksprivate updateLayersFromGeoData(geoData: FeatureCollection): void {   :: Write each line without line breaks// Clear previous layers   :: Write each line without line breaksthis.layers = [];   :: Write each line without line breaks// Example grouping logic: Group features by their "type" (Polygon, Point, etc.)   :: Write each line without line breaksconst groupedLayers: { [key: string]: Feature[] } = {};   :: Write each line without line breaksgeoData.features.forEach((feature) => {   :: Write each line without line breaksconst layerType = feature.geometry.type; // Example: group by geometry type (Point, LineString, etc.)   :: Write each line without line breaks// Initialize the layer group if it doesn't exist   :: Write each line without line breaksif (: Write each line without line breaksgroupedLayers[layerType] = [];   :: Write each line without line breaks}   :: Write each line without line breaks// Add the feature to the appropriate layer group   :: Write each line without line breaksgroupedLayers[layerType].push(feature);   :: Write each line without line breaks});   :: Write each line without line breaks// Create a layer for each group   :: Write each line without line breaksObject.keys(groupedLayers).forEach((layerType, index) => {   :: Write each line without line breaksthis.layers.push({   :: Write each line without line breaksid: `layer-${index}`,   :: Write each line without line breaksname: `${layerType} Layer`, // Naming the layer by geometry type   :: Write each line without line breakstype: 'geojson',   :: Write each line without line breaksvisible: true,   :: Write each line without line breaksopacity: 1,   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\layers\layers.component.html

<: Write each line without line breaks<div class="layers-container">   :: Write each line without line breaks<ul class="layer-list">   :: Write each line without line breaks<li *ngFor="let layer of layers; let i = index" class="layer-item">   :: Write each line without line breaks<div class="layer-header">   :: Write each line without line breaks<input   :: Write each line without line breakstype="checkbox"   :: Write each line without line breaks[checked]="layer.visible"   :: Write each line without line breaks(change)="toggleLayerVisibility(layer)"   :: Write each line without line breaks/>   :: Write each line without line breaks<span class="layer-name">{{ layer.name }}</span>   :: Write each line without line breaks<span class="layer-type">{{ layer.type }}</span>   :: Write each line without line breaks</div>   :: Write each line without line breaks<div class="layer-controls">   :: Write each line without line breaks<label>   :: Write each line without line breaksOpacity:   :: Write each line without line breaks<input   :: Write each line without line breakstype="range"   :: Write each line without line breaksmin="0"   :: Write each line without line breaksmax="1"   :: Write each line without line breaksstep="0.1"   :: Write each line without line breaks[value]="layer.opacity"   :: Write each line without line breaks(input)="updateLayerOpacity(layer, $event)"   :: Write each line without line breaks/>   :: Write each line without line breaks</label>   :: Write each line without line breaks</div>   :: Write each line without line breaks</li>   :: Write each line without line breaks</ul>   :: Write each line without line breaks</div>   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\map\map.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { MapComponent } from './map.component';   :: Write each line without line breaksdescribe('MapComponent', () => {   :: Write each line without line breakslet component: MapComponent;   :: Write each line without line breakslet fixture: ComponentFixture<MapComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [MapComponent],   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(MapComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\map\map.component.ts

import { Component, OnInit, AfterViewInit, OnDestroy, ElementRef, ViewChild } from '@angular/core';   :: Write each line without line breaksimport * as d3 from 'd3';   :: Write each line without line breaksimport * as d3Geo from 'd3-geo';   :: Write each line without line breaksimport { GeoModel } from '../../../models/geo-model';   :: Write each line without line breaksimport { CriteriaModel } from '../../../models/criteria.model';   :: Write each line without line breaksimport { ModelListener } from '../../../interfaces/model-listener';   :: Write each line without line breaksimport { SelectionListener } from '../../../interfaces/selection-listener';   :: Write each line without line breaksimport { FilterListener } from '../../../interfaces/filter-listener';   :: Write each line without line breaksimport { Feature } from 'geojson';   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-map',   :: Write each line without line breakstemplateUrl: './map.component.html',   :: Write each line without line breaksstyleUrls: ['./map.component.scss']   :: Write each line without line breaks})   :: Write each line without line breaksexport class MapComponent implements OnInit, AfterViewInit, OnDestroy, ModelListener, SelectionListener, FilterListener {   :: Write each line without line breaks@ViewChild('mapContainer', { static: true }) mapContainer: ElementRef;   :: Write each line without line breaksprivate svg: d3.Selection<SVGSVGElement, unknown, null, undefined>;   :: Write each line without line breaksprivate projection: d3.GeoProjection;   :: Write each line without line breaksprivate path: d3.GeoPath;   :: Write each line without line breaksprivate zoom: d3.ZoomBehavior<Element, unknown>;   :: Write each line without line breaksprivate g: d3.Selection<SVGGElement, unknown, null, undefined>;   :: Write each line without line breaksprivate width = 800;   :: Write each line without line breaksprivate height = 600;   :: Write each line without line breaksprivate currentModel: GeoModel | null = null;   :: Write each line without line breaksconstructor(public elementRef: ElementRef) {} // Inject ElementRef   :: Write each line without line breaksngOnInit(): void {}   :: Write each line without line breaksngAfterViewInit(): void {   :: Write each line without line breaksthis.initMap();   :: Write each line without line breakswindow.addEventListener('resize', () => {   :: Write each line without line breaksconst width = this.elementRef.nativeElement.offsetWidth;   :: Write each line without line breaksconst height = this.elementRef.nativeElement.offsetHeight;   :: Write each line without line breaksthis.resize(width, height); // Pass width and height   :: Write each line without line breaks});   :: Write each line without line breaks// Call resize initially to ensure the map starts with the correct size:   :: Write each line without line breaksconst initialWidth = this.elementRef.nativeElement.offsetWidth;   :: Write each line without line breaksconst initialHeight = this.elementRef.nativeElement.offsetHeight;   :: Write each line without line breaksthis.resize(initialWidth, initialHeight);   :: Write each line without line breaks}   :: Write each line without line breaksonModelChange(model: GeoModel): void {   :: Write each line without line breaksthis.updateMapData(model);  // Call updateMapData when model changes   :: Write each line without line breaks}   :: Write each line without line breaksonSelect(feature: Feature): void {   :: Write each line without line breaksconsole.log('Feature selected:', feature);   :: Write each line without line breaksthis.highlightFeature(feature);   :: Write each line without line breaks}   :: Write each line without line breaksonDeselect(feature: Feature): void {   :: Write each line without line breaksconsole.log('Feature deselected:', feature);   :: Write each line without line breaks}   :: Write each line without line breaksonClearSelection(): void {}   :: Write each line without line breaksonFilter(criteria: CriteriaModel): void {   :: Write each line without line breaksthis.applyFilter(criteria);   :: Write each line without line breaks}   :: Write each line without line breaksonClearFilter(): void {}   :: Write each line without line breaksonResize() {}   :: Write each line without line breaksresize(width: number, height: number): void {   :: Write each line without line breaksthis.width = width;   :: Write each line without line breaksthis.height = height;   :: Write each line without line breaksthis.svg   :: Write each line without line breaks.attr('width', width)   :: Write each line without line breaks.attr('height', height);   :: Write each line without line breaksthis.projection.translate([width / 2, height / 2]);   :: Write each line without line breaksif (this.currentModel) {   :: Write each line without line breaksthis.updateMapData(this.currentModel);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksprivate initMap(): void {   :: Write each line without line breaksthis.svg = d3.select(this.mapContainer.nativeElement)   :: Write each line without line breaks.append('svg')   :: Write each line without line breaks.attr('width', this.width)   :: Write each line without line breaks.attr('height', this.height);   :: Write each line without line breaksthis.projection = d3Geo.geoMercator()   :: Write each line without line breaks.scale(150)   :: Write each line without line breaks.translate([this.width / 2, this.height / 2]);   :: Write each line without line breaksthis.path = d3Geo.geoPath().projection(this.projection);   :: Write each line without line breaksthis.zoom = d3.zoom()   :: Write each line without line breaks.scaleExtent([1, 8])   :: Write each line without line breaks.on('zoom', (event) => {   :: Write each line without line breaksthis.g.attr('transform', event.transform);   :: Write each line without line breaks});   :: Write each line without line breaksthis.svg.call(this.zoom);   :: Write each line without line breaksthis.g = this.svg.append('g');   :: Write each line without line breaks}   :: Write each line without line breaksprivate renderGeoJSON(geoData: GeoModel): void {   :: Write each line without line breaks// Clear previous paths   :: Write each line without line breaksthis.g.selectAll('path').remove();   :: Write each line without line breaks// Render all features in the GeoModel   :: Write each line without line breaksthis.g.selectAll('path')   :: Write each line without line breaks.data(geoData.data.features)  // Use the features from the GeoModel   :: Write each line without line breaks.enter().append('path')   :: Write each line without line breaks.attr('d', (d) => this.path(d as any) || '')  // Use D3's path generator   :: Write each line without line breaks.attr('fill', (d: any) => d.geometry.type === 'Polygon' ? '#ccc' : 'none')  // Fill only polygons   :: Write each line without line breaks.attr('stroke', (d: any) => d.geometry.type === 'LineString' ? 'blue' : '#333')  // Style the lines   :: Write each line without line breaks.attr('stroke-width', (d: any) => d.geometry.type === 'LineString' ? 2 : 1)  // Thicker lines for city pairs   :: Write each line without line breaks.on('click', (event: PointerEvent, d: Feature) => this.onFeatureClick(event, d));   :: Write each line without line breaks}   :: Write each line without line breaksprivate updateMapData(model: GeoModel): void {   :: Write each line without line breaksthis.currentModel = model;   :: Write each line without line breaksthis.renderGeoJSON(model);  // Call renderGeoJSON when the model is updated   :: Write each line without line breaks}   :: Write each line without line breaksprivate onFeatureClick(event: PointerEvent, feature: Feature): void {   :: Write each line without line breaksconsole.log('Feature clicked:', feature);   :: Write each line without line breaks// Prevent the event from bubbling up to parent elements   :: Write each line without line breaksevent.stopPropagation();   :: Write each line without line breaks// Toggle the selection state of the clicked feature   :: Write each line without line breaksconst isSelected = feature.properties?.selected;   :: Write each line without line breaksfeature.properties = { ...feature.properties, selected: : Write each line without line breaks// Update the visual representation of the clicked feature   :: Write each line without line breaksthis.g.selectAll('path')   :: Write each line without line breaks.filter((d: any) => d.id === feature.id)   :: Write each line without line breaks.attr('fill', this.getFeatureColor(feature))   :: Write each line without line breaks.attr('stroke-width', this.getFeatureStrokeWidth(feature));   :: Write each line without line breaks// If this feature was just selected, deselect all other features   :: Write each line without line breaksif (: Write each line without line breaksthis.g.selectAll('path')   :: Write each line without line breaks.filter((d: any) => d.id : Write each line without line breaks.each((d: any) => {   :: Write each line without line breaksd.properties.selected = false;   :: Write each line without line breaks})   :: Write each line without line breaks.attr('fill', (d: any) => this.getFeatureColor(d))   :: Write each line without line breaks.attr('stroke-width', (d: any) => this.getFeatureStrokeWidth(d));   :: Write each line without line breaks}   :: Write each line without line breaks// Notify other components about the selection change   :: Write each line without line breaksif (feature.properties?.selected) {   :: Write each line without line breaksthis.onSelect(feature);   :: Write each line without line breaks} else {   :: Write each line without line breaksthis.onDeselect(feature);   :: Write each line without line breaks}   :: Write each line without line breaks// Optionally center the map on the selected feature   :: Write each line without line breaksif (feature.properties?.selected) {   :: Write each line without line breaksthis.centerMapOnFeature(feature);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksprivate highlightFeature(feature: Feature): void {   :: Write each line without line breaksthis.g.selectAll('path')   :: Write each line without line breaks.attr('fill', (d: Feature) => d === feature ? '#ff7f00' : '#ccc');   :: Write each line without line breaks}   :: Write each line without line breaksprivate applyFilter(criteria: CriteriaModel): void {   :: Write each line without line breaksconsole.log('Applying filter:', criteria);   :: Write each line without line breaks}   :: Write each line without line breaksonFeatureUpdate(featureId: string, properties: { [key: string]: any }): void {   :: Write each line without line breaksif (this.currentModel) {   :: Write each line without line breaksconst updatedFeature = this.currentModel.features.find(f => f.id === featureId);   :: Write each line without line breaksif (updatedFeature) {   :: Write each line without line breaksObject.assign(updatedFeature.properties, properties);   :: Write each line without line breaks// Update map visualization   :: Write each line without line breaksthis.g.selectAll('path')   :: Write each line without line breaks.filter((d: any) => d.id === featureId)   :: Write each line without line breaks.attr('fill', this.getFeatureColor(updatedFeature))   :: Write each line without line breaks.attr('stroke-width', this.getFeatureStrokeWidth(updatedFeature));   :: Write each line without line breaksif (properties.geometry) {   :: Write each line without line breaksthis.g.selectAll('path')   :: Write each line without line breaks.filter((d: any) => d.id === featureId)   :: Write each line without line breaks.attr('d', (d) => this.path(d as any) || '');   :: Write each line without line breaks}   :: Write each line without line breaksif ('visible' in properties) {   :: Write each line without line breaksthis.g.selectAll('path')   :: Write each line without line breaks.filter((d: any) => d.id === featureId)   :: Write each line without line breaks.attr('visibility', properties.visible ? 'visible' : 'hidden');   :: Write each line without line breaks}   :: Write each line without line breaksif ('opacity' in properties) {   :: Write each line without line breaksthis.g.selectAll('path')   :: Write each line without line breaks.filter((d: any) => d.id === featureId)   :: Write each line without line breaks.attr('opacity', properties.opacity);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksprivate getFeatureColor(feature: Feature): string {   :: Write each line without line breaksreturn feature.properties?.color || '#ccc';   :: Write each line without line breaks}   :: Write each line without line breaksprivate getFeatureStrokeWidth(feature: Feature): number {   :: Write each line without line breaksreturn feature.properties?.selected ? 2 : 1;   :: Write each line without line breaks}   :: Write each line without line breaksprivate centerMapOnFeature(feature: Feature): void {   :: Write each line without line breaksconst bounds = this.path.bounds(feature as any);   :: Write each line without line breaksconst dx = bounds[1][0] - bounds[0][0];   :: Write each line without line breaksconst dy = bounds[1][1] - bounds[0][1];   :: Write each line without line breaksconst x = (bounds[0][0] + bounds[1][0]) / 2;   :: Write each line without line breaksconst y = (bounds[0][1] + bounds[1][1]) / 2;   :: Write each line without line breaksconst scale = Math.max(1, Math.min(8, 0.9 / Math.max(dx / this.width, dy / this.height)));   :: Write each line without line breaksconst translate = [this.width / 2 - scale * x, this.height / 2 - scale * y];   :: Write each line without line breaksthis.svg.transition()   :: Write each line without line breaks.duration(750)   :: Write each line without line breaks.call(this.zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));   :: Write each line without line breaks}   :: Write each line without line breaksngOnDestroy(): void {   :: Write each line without line breaks// Cleanup logic can go here if necessary   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\map\map.component.html

<div #mapContainer class="map-container"></div>   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\slider\slider.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { SliderComponent } from './slider.component';   :: Write each line without line breaksdescribe('SliderComponent', () => {   :: Write each line without line breakslet component: SliderComponent;   :: Write each line without line breakslet fixture: ComponentFixture<SliderComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [SliderComponent],   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(SliderComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\slider\slider.component.ts

// slider.component.ts   :: Write each line without line breaksimport { Component, Output, EventEmitter } from '@angular/core';   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-slider',   :: Write each line without line breakstemplate:   :: Write each line without line breaks'<input type="range" min="0" max="100" [value]="sliderPosition" (input)="onSliderInput($event)">',   :: Write each line without line breaksstyles: [   :: Write each line without line breaks`   :: Write each line without line breaksinput[type='range'] {   :: Write each line without line breakswidth: 100%;   :: Write each line without line breaks}   :: Write each line without line breaks`,   :: Write each line without line breaks],   :: Write each line without line breaks})   :: Write each line without line breaksexport class SliderComponent {   :: Write each line without line breaks@Output() positionChange = new EventEmitter<number>();   :: Write each line without line breakssliderPosition = 50; // Default to 50%   :: Write each line without line breaksonSliderInput(event: Event): void {   :: Write each line without line breaksconst inputElement = event.target as HTMLInputElement;   :: Write each line without line breaksthis.sliderPosition = Number(inputElement.value);   :: Write each line without line breaksthis.positionChange.emit(this.sliderPosition);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\slider\slider.component.html

<p>slider works: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\table\table.component.spec.ts

import { ComponentFixture, TestBed } from '@angular/core/testing';   :: Write each line without line breaksimport { TableComponent } from './table.component';   :: Write each line without line breaksdescribe('TableComponent', () => {   :: Write each line without line breakslet component: TableComponent;   :: Write each line without line breakslet fixture: ComponentFixture<TableComponent>;   :: Write each line without line breaksbeforeEach(() => {   :: Write each line without line breaksTestBed.configureTestingModule({   :: Write each line without line breaksdeclarations: [TableComponent],   :: Write each line without line breaks});   :: Write each line without line breaksfixture = TestBed.createComponent(TableComponent);   :: Write each line without line breakscomponent = fixture.componentInstance;   :: Write each line without line breaksfixture.detectChanges();   :: Write each line without line breaks});   :: Write each line without line breaksit('should create', () => {   :: Write each line without line breaksexpect(component).toBeTruthy();   :: Write each line without line breaks});   :: Write each line without line breaks});   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\table\table.component.ts

import {   :: Write each line without line breaksComponent,   :: Write each line without line breaksOnInit,   :: Write each line without line breaksInput,   :: Write each line without line breaksOutput,   :: Write each line without line breaksEventEmitter,   :: Write each line without line breaksElementRef,   :: Write each line without line breaks} from '@angular/core';   :: Write each line without line breaksimport { GeoModel } from '../../../models/geo-model';   :: Write each line without line breaksimport { CriteriaModel } from '../../../models/criteria.model';   :: Write each line without line breaksimport { ModelListener } from '../../../interfaces/model-listener';   :: Write each line without line breaksimport { SelectionListener } from '../../../interfaces/selection-listener';   :: Write each line without line breaksimport { Feature } from 'geojson';   :: Write each line without line breaks@Component({   :: Write each line without line breaksselector: 'app-table',   :: Write each line without line breakstemplateUrl: './table.component.html',   :: Write each line without line breaksstyleUrls: ['./table.component.scss'],   :: Write each line without line breaks})   :: Write each line without line breaksexport class TableComponent   :: Write each line without line breaksimplements OnInit, ModelListener, SelectionListener   :: Write each line without line breaks{   :: Write each line without line breaks@Input() model: GeoModel | null = null;   :: Write each line without line breaks@Output() featureSelect = new EventEmitter<Feature>();   :: Write each line without line breaks@Output() filterChange = new EventEmitter<CriteriaModel>();   :: Write each line without line breaksdisplayedColumns: string[] = [];   :: Write each line without line breaksdataSource: any[] = [];   :: Write each line without line breaksselectedFeature: Feature | null = null;   :: Write each line without line breaksconstructor(public elementRef: ElementRef) {} // Inject ElementRef   :: Write each line without line breaksngOnInit(): void {   :: Write each line without line breaksif (this.model) {   :: Write each line without line breaksthis.updateTable();   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksonModelChange(model: GeoModel): void {   :: Write each line without line breaksthis.model = model;   :: Write each line without line breaksthis.updateTable();   :: Write each line without line breaks}   :: Write each line without line breaksonSelect(feature: Feature): void {   :: Write each line without line breaksthis.selectedFeature = feature;   :: Write each line without line breaksthis.highlightRow(feature);   :: Write each line without line breaks}   :: Write each line without line breaksonDeselect(feature: Feature): void {   :: Write each line without line breaksif (this.selectedFeature === feature) {   :: Write each line without line breaksthis.selectedFeature = null;   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksonClearSelection(): void {   :: Write each line without line breaksthis.selectedFeature = null;   :: Write each line without line breaks// Implement logic to clear row highlighting   :: Write each line without line breaks}   :: Write each line without line breaksupdateTable(): void {   :: Write each line without line breaksif (this.model && this.model.data.features.length > 0) {   :: Write each line without line breaksconst firstFeature = this.model.data.features[0];   :: Write each line without line breaksthis.displayedColumns = Object.keys(firstFeature.properties || {});   :: Write each line without line breaksthis.dataSource = this.model.data.features.map(   :: Write each line without line breaks(feature) => feature.properties || {},   :: Write each line without line breaks);   :: Write each line without line breaks} else {   :: Write each line without line breaksthis.displayedColumns = [];   :: Write each line without line breaksthis.dataSource = [];   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksonFeatureUpdate(featureId: string, properties: { [key: string]: any }): void {   :: Write each line without line breaksif (this.model) {   :: Write each line without line breaksconst feature = this.model.features.find((f) => f.id === featureId);   :: Write each line without line breaksif (feature) {   :: Write each line without line breaksObject.assign(feature.properties, properties);   :: Write each line without line breaksthis.updateTable();   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksonRowClick(row: any): void {   :: Write each line without line breaksconst feature = this.model?.data.features.find((f) => f.properties === row);   :: Write each line without line breaksif (feature) {   :: Write each line without line breaksthis.featureSelect.emit(feature);   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breakssortData(column: string): void {   :: Write each line without line breaksthis.dataSource.sort((a, b) => {   :: Write each line without line breaksconst valueA = a[column];   :: Write each line without line breaksconst valueB = b[column];   :: Write each line without line breaksif (valueA < valueB) return -1;   :: Write each line without line breaksif (valueA > valueB) return 1;   :: Write each line without line breaksreturn 0;   :: Write each line without line breaks});   :: Write each line without line breaks// Trigger change detection   :: Write each line without line breaksthis.dataSource = [...this.dataSource];   :: Write each line without line breaks}   :: Write each line without line breaksapplyFilter(filterValue: string): void {   :: Write each line without line breaksconst criteria: CriteriaModel = { filterString: filterValue };   :: Write each line without line breaksthis.filterChange.emit(criteria);   :: Write each line without line breaks}   :: Write each line without line breaksprivate highlightRow(feature: Feature): void {   :: Write each line without line breaks// Implement row highlighting logic   :: Write each line without line breaks// For example, you could add a CSS class to the selected row   :: Write each line without line breaks// This would require updating the template to use [class.selected]="row === selectedFeature?.properties"   :: Write each line without line breaks}   :: Write each line without line breaksresize(width: number, height: number): void {   :: Write each line without line breaks// Implement resize logic if necessary   :: Write each line without line breaks// For example, you might want to adjust the table's container size   :: Write each line without line breaks// or update the number of visible rows based on the new height   :: Write each line without line breaks}   :: Write each line without line breaks}   :: Write each line without line breaksecho .file
----------------------------------------

\src\app\components\geo-view\table\table.component.html

<div class="table-container">   :: Write each line without line breaks<div class="table-header">   :: Write each line without line breaks<input (keyup)="applyFilter($event.target.value)" placeholder="Filter" />   :: Write each line without line breaks</div>   :: Write each line without line breaks<table>   :: Write each line without line breaks<thead>   :: Write each line without line breaks<tr>   :: Write each line without line breaks<th *ngFor="let column of displayedColumns" (click)="sortData(column)">   :: Write each line without line breaks{{ column }}   :: Write each line without line breaks</th>   :: Write each line without line breaks</tr>   :: Write each line without line breaks</thead>   :: Write each line without line breaks<tbody>   :: Write each line without line breaks<tr   :: Write each line without line breaks*ngFor="let row of dataSource"   :: Write each line without line breaks(click)="onRowClick(row)"   :: Write each line without line breaks[class.selected]="row === selectedFeature?.properties"   :: Write each line without line breaks>   :: Write each line without line breaks<td *ngFor="let column of displayedColumns">{{ row[column] }}</td>   :: Write each line without line breaks</tr>   :: Write each line without line breaks</tbody>   :: Write each line without line breaks</table>   :: Write each line without line breaks</div>   :: Write each line without line breaksecho .file
